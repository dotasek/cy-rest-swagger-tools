{
  "swagger" : "2.0",
  "info" : {
    "description" : "An API to offer access to Cytoscape command line commands through a REST-like service.\n\nIn Cytoscape 3.6, this section is upgraded with support for POST access to Cytoscape commands, offering enhanced documentation as well as JSON output for some commands. **The JSON currently provided by commands in this release may be expanded or revised in future releases.**\n\nAll commands are still available via GET requests, the syntax of which is described in the [Command resources](#!/Commands).",
    "version" : "V2.0.0",
    "title" : "CyREST Command API"
  },
  "host" : "localhost:1234",
  "tags" : [ {
    "name" : "Commands"
  } ],
  "schemes" : [ "http" ],
  "consumes" : [ "application/json", "application/xml" ],
  "produces" : [ "application/json", "application/xml" ],
  "paths" : {
    "/v1/commands" : {
      "get" : {
        "tags" : [ "Commands" ],
        "summary" : "List all available command namespaces",
        "description" : "Method handling HTTP GET requests to enumerate all namespaces. The returned list will be sent to the client as \"text/html\" media type.",
        "operationId" : "enumerateNamespacesHtml",
        "produces" : [ "text/html" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          }
        }
      }
    },
    "/v1/commands/{namespace}" : {
      "get" : {
        "tags" : [ "Commands" ],
        "summary" : "List all available commands in a namespace",
        "description" : "Method to enumerate all commands for a given namespace. The returned list will be sent to the client as \"text/html\" media type.",
        "operationId" : "enumerateHTMLCommands",
        "produces" : [ "text/html" ],
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          }
        }
      }
    },
    "/v1/commands/{namespace}/{command}" : {
      "get" : {
        "tags" : [ "Commands" ],
        "summary" : "Execute a command or list its arguments",
        "description" : "Method to enumerate all arguments for a given namespace and command or execute a namespace and command if query strings are provided.\n\nReturns a list of arguments as text/plain or the results of executing the command.",
        "operationId" : "handleCommand",
        "produces" : [ "text/plain" ],
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "Command Namespace",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "command",
          "in" : "path",
          "description" : "Command Name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          }
        }
      }
    },
    "/v1/commands/command/echo" : {
      "post" : {
        "tags" : [ "command" ],
        "summary" : "Prints the value of a variable",
        "description" : "The **echo** command will display the value of the variable specified by the *variableName* argument, or all variables if variableName is not provided",
        "operationId" : "command/echo",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "required" : [ "variableName" ],
            "properties" : {
              "variableName" : {
                "type" : "string",
                "example" : "*",
                "description" : "The name of the variable or '*' to display the value of all variables"
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : [ {
                  "var1" : "1234"
                }, {
                  "var2" : "value2"
                } ],
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/command/open dialog" : {
      "post" : {
        "tags" : [ "command" ],
        "summary" : "Open the command line dialog",
        "description" : "The command line dialog provides a field to enter commands and view results.  It also provides the help command to display namespaces, commands, and arguments",
        "operationId" : "command/open dialog",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/command/pause" : {
      "post" : {
        "tags" : [ "command" ],
        "summary" : "Display a message and pause command processing until the user continues it",
        "description" : "The **pause** command displays a dialog with the text provided in the *message* argument and waits for the user to click **OK**",
        "operationId" : "command/pause",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "message" : {
                "type" : "string",
                "example" : "Press OK to continue",
                "description" : ""
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/command/quit" : {
      "post" : {
        "tags" : [ "command" ],
        "summary" : "Exit Cytoscape",
        "description" : "This command causes Cytoscape to exit.It is typically used at the end of a script file",
        "operationId" : "command/quit",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/command/run" : {
      "post" : {
        "tags" : [ "command" ],
        "summary" : "Run a series of commands from a file",
        "description" : "The **run** command will execute a command script from the file pointed to by the ``file`` argument, which should contain Cytoscape commands, one per line. Arguments to the script are provided by the *args* argument",
        "operationId" : "command/run",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "required" : [ "file" ],
            "properties" : {
              "args" : {
                "type" : "string",
                "example" : "arg1:value,arg2:value",
                "description" : "Enter the script arguments as key:value pairs separated by commas"
              },
              "file" : {
                "type" : "string",
                "description" : ""
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/command/sleep" : {
      "post" : {
        "tags" : [ "command" ],
        "summary" : "Stop command processing for a specified time",
        "description" : "The **sleep** command will pause processing for a period of time as specified by *duration* seconds.  It is typically used as part of a command script.",
        "operationId" : "command/sleep",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "duration" : {
                "type" : "string",
                "example" : "5",
                "description" : "Enter the time in seconds to sleep"
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/cybrowser/close" : {
      "post" : {
        "tags" : [ "cybrowser" ],
        "summary" : "Close an open browser, removing it's id",
        "description" : "Close an internal web browser and remove all content.  Provide an ``id`` for the browser you want to close.",
        "operationId" : "cybrowser/close",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "id" : {
                "type" : "string",
                "example" : "Window 1",
                "description" : "The ID for the browser window to close"
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "id" : "my window"
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/cybrowser/dialog" : {
      "post" : {
        "tags" : [ "cybrowser" ],
        "summary" : "Launch an HTML browser in a separate window",
        "description" : "Launch Cytoscape's internal web browser in a separate window.  Provide an ``id`` for the window if you want subsequent control of the window via ``cybrowser hide``",
        "operationId" : "cybrowser/dialog",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "debug" : {
                "type" : "string",
                "example" : "false",
                "description" : "Whether or not to show the web programmer debugging tools"
              },
              "id" : {
                "type" : "string",
                "example" : "Window 1",
                "description" : "The ID for this browser window.  Use this with ``cybrowser hide`` to hide the browser"
              },
              "text" : {
                "type" : "string",
                "example" : "<HTML><HEAD><TITLE>Hello</TITLE></HEAD><BODY>Hello, world!</BODY></HTML>",
                "description" : "HTML text to initially load into the browser"
              },
              "title" : {
                "type" : "string",
                "example" : "Cytoscape Home Page",
                "description" : "Text to be shown in the title bar of the browser window"
              },
              "url" : {
                "type" : "string",
                "example" : "http://www.cytoscape.org",
                "description" : "The URL the browser should load"
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "id" : "my window"
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/cybrowser/hide" : {
      "post" : {
        "tags" : [ "cybrowser" ],
        "summary" : "Hide an HTML browser in the Results Panel",
        "description" : "Hide an existing browser, whether it's in the Results panel or a separate window.",
        "operationId" : "cybrowser/hide",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "id" : {
                "type" : "string",
                "example" : "Window 1",
                "description" : "The ID for the browser window to hide"
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/cybrowser/list" : {
      "post" : {
        "tags" : [ "cybrowser" ],
        "summary" : "List all open browsers",
        "description" : "List all browsers that are currently open, whether as a dialog or in the results panel.",
        "operationId" : "cybrowser/list",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ {
                  "status" : 500,
                  "type" : "urn:cytoscape:ci:cyrest-core:v1:handle-json-command:errors:3",
                  "message" : "Task returned invalid json."
                } ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/cybrowser/send" : {
      "post" : {
        "tags" : [ "cybrowser" ],
        "summary" : "Send (execute) javascript commands to a browser",
        "description" : "Send the text to the browser indicated by the ``id`` and return the response, if any.  Note that the JSON ``result`` field could either be a bare string or JSON formatted text.",
        "operationId" : "cybrowser/send",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "id" : {
                "type" : "string",
                "example" : "Window 1",
                "description" : "The ID for the browser window to close"
              },
              "script" : {
                "type" : "string",
                "example" : "navigator.userAgent;",
                "description" : "A string that represents a JavaScript variable, script, or call to be executed in the browser.  Note that only string results are returned"
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "browserId" : "my window",
                  "result" : [ 1, 2, 3, 4 ]
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/cybrowser/show" : {
      "post" : {
        "tags" : [ "cybrowser" ],
        "summary" : "Launch an HTML browser in the Results Panel",
        "description" : "Launch Cytoscape's internal web browser in a pane in the Result Panel.  Provide an ``id`` for the window if you want subsequent control of the window via ``cybrowser hide``",
        "operationId" : "cybrowser/show",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "id" : {
                "type" : "string",
                "example" : "Window 1",
                "description" : "The ID for this browser window.  Use this with ``cybrowser hide`` to hide the browser"
              },
              "text" : {
                "type" : "string",
                "example" : "<HTML><HEAD><TITLE>Hello</TITLE></HEAD><BODY>Hello, world!</BODY></HTML>",
                "description" : "HTML text to initially load into the browser"
              },
              "title" : {
                "type" : "string",
                "example" : "Cytoscape Home Page",
                "description" : "Text to be shown in the title bar of the browser window"
              },
              "url" : {
                "type" : "string",
                "example" : "http://www.cytoscape.org",
                "description" : "The URL the browser should load"
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "id" : "my window"
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/cybrowser/version" : {
      "post" : {
        "tags" : [ "cybrowser" ],
        "summary" : "Display the CyBrowser version",
        "description" : "Display the version of the CyBrowser app.",
        "operationId" : "cybrowser/version",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "version" : "1.0"
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/diffusion/diffuse" : {
      "post" : {
        "tags" : [ "diffusion" ],
        "summary" : "Execute Diffusion on Selected Nodes",
        "description" : "Diffusion will send the selected network view and its selected nodes to a web-based REST service to calculate network propagation. Results are returned and represented by columns in the node table.\n\nColumns are created for each execution of Diffusion and their names are returned in the response.\n\nThe nodes you would like to use as input should be selected. This will be used to generate the contents of the **diffusion\\_input** column, which represents the query vector and corresponds to h in the diffusion equation.\n\n",
        "operationId" : "diffusion/diffuse",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "heatColumn" : "diffusion_output_heat",
                  "rankColumn" : "diffusion_output_rank"
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/diffusion/diffuse_advanced" : {
      "post" : {
        "tags" : [ "diffusion" ],
        "summary" : "Execute Diffusion with Options",
        "description" : "Diffusion will send the selected network view and its selected nodes to a web-based REST service to calculate network propagation. Results are returned and represented by columns in the node table.\n\nColumns are created for each execution of Diffusion and their names are returned in the response.\n\n",
        "operationId" : "diffusion/diffuse_advanced",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "heatColumnName" : {
                "type" : "string",
                "example" : "diffusion_input",
                "description" : "A node column name intended to override the default table column 'diffusion_input'. This represents the query vector and corresponds to h in the diffusion equation.",
                "enum" : [ "(Use selected nodes)" ]
              },
              "time" : {
                "type" : "string",
                "example" : "0.1",
                "description" : "The extent of spread over the network. This corresponds to t in the diffusion equation."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "heatColumn" : "diffusion_output_heat",
                  "rankColumn" : "diffusion_output_rank"
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/edge/create attribute" : {
      "post" : {
        "tags" : [ "edge" ],
        "summary" : "Create a new column for edges",
        "description" : "Creates a new edge column.",
        "operationId" : "edge/create attribute",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "column" : {
                "type" : "string",
                "example" : "NewColumn",
                "description" : "Unique name of column"
              },
              "listType" : {
                "type" : "string",
                "example" : "string",
                "description" : "Can be one of `integer`, `long`, `double`, or `string`.",
                "enum" : [ "integer", "long", "double", "string", "boolean" ]
              },
              "namespace" : {
                "type" : "string",
                "example" : "default",
                "description" : "Node, Edge, and Network objects support the ```default```, ```local```, and ```hidden``` namespaces. Root networks also support the ```shared``` namespace. Custom namespaces may be specified by Apps."
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "type" : {
                "type" : "string",
                "example" : "string",
                "description" : "Can be one of `integer`, `long`, `double`, `string`, or `list`.",
                "enum" : [ "integer", "long", "double", "string", "boolean", "list" ]
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "columnName" : "New Column"
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/edge/get" : {
      "post" : {
        "tags" : [ "edge" ],
        "summary" : "Get an edge",
        "description" : "Returns the SUID of an edge that matches the passed parameters. If multiple edges are found, only one will be returned, and a warning will be reported in the Cytoscape Task History dialog.",
        "operationId" : "edge/get",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "edge" : {
                "type" : "string",
                "example" : "Node 1 (interacts with) Node 2",
                "description" : "Selects an edge by name, or, if the parameter has the prefix ```suid:```, selects an edge by SUID. If this parameter is set, all other edge matching parameters are ignored."
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "sourceNode" : {
                "type" : "string",
                "example" : "Node 1",
                "description" : "Selects a node by name, or, if the parameter has the prefix ```suid:```, selects a node by SUID. Specifies that the edge matched must have this node as its source. This parameter must be used with the ```targetNode``` parameter to produce results."
              },
              "targetNode" : {
                "type" : "string",
                "example" : "Node 2",
                "description" : "Selects a node by name, or, if the parameter has the prefix ```suid:```, selects a node by SUID. Specifies that the edge matched must have this node as its target. This parameter must be used with the ```sourceNode``` parameter to produce results."
              },
              "type" : {
                "type" : "string",
                "example" : "any",
                "description" : "Specifies that the edge matched must be of the specified type. This parameter must be used with the ```sourceNode``` and ```targetNode``` parameters to produce results.",
                "enum" : [ "any", "directed", "undirected" ]
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "edge" : 101
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/edge/get attribute" : {
      "post" : {
        "tags" : [ "edge" ],
        "summary" : "Get the values from a column in a set of edges",
        "description" : "Returns the attributes for the edges passed as parameters.",
        "operationId" : "edge/get attribute",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "columnList" : {
                "type" : "string",
                "example" : "name,Column B",
                "description" : "A list of column names, separated by commas."
              },
              "edgeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of edges. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify edges by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              },
              "namespace" : {
                "type" : "string",
                "example" : "default",
                "description" : "Node, Edge, and Network objects support the ```default```, ```local```, and ```hidden``` namespaces. Root networks also support the ```shared``` namespace. Custom namespaces may be specified by Apps."
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : [ {
                  "name" : "Object 1",
                  "SUID" : 101
                }, {
                  "name" : "Object 2",
                  "SUID" : 102
                } ],
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/edge/get properties" : {
      "post" : {
        "tags" : [ "edge" ],
        "summary" : "Get the visual properties for edges",
        "description" : "Returns the visual properties for the edges that match the passed parameters.",
        "operationId" : "edge/get properties",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "edgeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of edges. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify edges by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "propertyList" : {
                "type" : "string",
                "example" : "Paint,Visible",
                "description" : "A list of property names separated by commas."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : [ {
                  "SUID" : 92,
                  "visualProperties" : [ {
                    "visualProperty" : "EDGE_PAINT",
                    "value" : "#808080"
                  }, {
                    "visualProperty" : "EDGE_VISIBLE",
                    "value" : true
                  } ]
                } ],
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/edge/list" : {
      "post" : {
        "tags" : [ "edge" ],
        "summary" : "List edges",
        "description" : "Returns a list of the edge SUIDs associated with the passed network parameter.",
        "operationId" : "edge/list",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "edgeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of edges. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify edges by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "edges" : [ 101, 102 ]
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/edge/list attributes" : {
      "post" : {
        "tags" : [ "edge" ],
        "summary" : "List all of the columns for edges",
        "description" : "Returns a list of column names assocated with edges.",
        "operationId" : "edge/list attributes",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "namespace" : {
                "type" : "string",
                "example" : "default",
                "description" : "Node, Edge, and Network objects support the ```default```, ```local```, and ```hidden``` namespaces. Root networks also support the ```shared``` namespace. Custom namespaces may be specified by Apps."
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : [ "SUID", "name" ],
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/edge/list properties" : {
      "post" : {
        "tags" : [ "edge" ],
        "summary" : "List all of the visual properties for edges",
        "description" : "Returns a list of visual properties available for edges.",
        "operationId" : "edge/list properties",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : [ "Paint", "Visible" ],
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/edge/rename" : {
      "post" : {
        "tags" : [ "edge" ],
        "summary" : "Rename an edge",
        "description" : "Sets the value of the name column for the passed edge.",
        "operationId" : "edge/rename",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "edge" : {
                "type" : "string",
                "example" : "SUID:101",
                "description" : "Selects an edge by name, or, if the parameter has the prefix ```suid:```, selects an edge by SUID."
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "newName" : {
                "type" : "string",
                "example" : "New Name",
                "description" : "New name of the edge"
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/edge/set attribute" : {
      "post" : {
        "tags" : [ "edge" ],
        "summary" : "Change edge table values for an edge or set of edges",
        "description" : "Sets the value of a specified column for the passed edge or set of edges.",
        "operationId" : "edge/set attribute",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "columnList" : {
                "type" : "string",
                "example" : "name,Column B",
                "description" : "A list of column names, separated by commas."
              },
              "edgeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of edges. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify edges by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              },
              "namespace" : {
                "type" : "string",
                "example" : "default",
                "description" : "Node, Edge, and Network objects support the ```default```, ```local```, and ```hidden``` namespaces. Root networks also support the ```shared``` namespace. Custom namespaces may be specified by Apps."
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "valueList" : {
                "type" : "string",
                "example" : "New Name,2",
                "description" : "A list of values, separated by commas. List values can be included using the format ```[value1,value2]```."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/edge/set properties" : {
      "post" : {
        "tags" : [ "edge" ],
        "summary" : "Change visual properties for a set of edges",
        "description" : "Sets the value of a specified property for the passed edge or set of edges.",
        "operationId" : "edge/set properties",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "edgeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of edges. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify edges by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "propertyList" : {
                "type" : "string",
                "example" : "Paint, Visible",
                "description" : "A list of property names separated by commas."
              },
              "valueList" : {
                "type" : "string",
                "example" : "#808080,true",
                "description" : "A list of values separated by commas."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/group/add" : {
      "post" : {
        "tags" : [ "group" ],
        "summary" : "Add nodes or edges to a group",
        "description" : "Adds the specified nodes and edges to the specified group",
        "operationId" : "group/add",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "edgeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of edges. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify edges by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              },
              "groupName" : {
                "type" : "string",
                "example" : "MyLocus",
                "description" : "Specifies the name used to identify the group. "
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "nodeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of nodes. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify nodes by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/group/collapse" : {
      "post" : {
        "tags" : [ "group" ],
        "summary" : "Collapse groups",
        "description" : "Replaces the representation of all of the nodes and edges in a group with a single node",
        "operationId" : "group/collapse",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "groupList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of groups. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify groups by their selection state. "
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "groups" : [ 123, 124 ]
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/group/create" : {
      "post" : {
        "tags" : [ "group" ],
        "summary" : "Create a new group of nodes",
        "description" : "Create a group from the specified nodes.",
        "operationId" : "group/create",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "groupName" : {
                "type" : "string",
                "example" : "MyLocus",
                "description" : "Specifies the name used to identify the group. "
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "nodeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of nodes. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify nodes by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "group" : 123
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/group/expand" : {
      "post" : {
        "tags" : [ "group" ],
        "summary" : "Expand collapsed groups",
        "description" : "Replaces the group node with member nodes for a set of groups",
        "operationId" : "group/expand",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "groupList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of groups. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify groups by their selection state. "
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "groups" : [ 123, 124 ]
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/group/get" : {
      "post" : {
        "tags" : [ "group" ],
        "summary" : "Get a particular group",
        "description" : "Get a group by providing a network and the group node identifier",
        "operationId" : "group/get",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "node" : {
                "type" : "string",
                "example" : "Node 1",
                "description" : "Selects a node by name, or, if the parameter has the prefix ```suid:```, selects a node by SUID."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "group" : 1234,
                  "name" : "my group",
                  "nodes" : [ 122, 123, 124, 125 ],
                  "externalEdges" : [ 201, 202, 203 ],
                  "internalEdges" : [ 300, 301 ],
                  "collapsed" : false
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/group/list" : {
      "post" : {
        "tags" : [ "group" ],
        "summary" : "List all of the groups in a network",
        "description" : "Lists the SUIDs of all of the groups in a network",
        "operationId" : "group/list",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "groups" : [ 123, 124, 126 ]
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/group/remove" : {
      "post" : {
        "tags" : [ "group" ],
        "summary" : "Remove nodes or edges from a group",
        "description" : "Remove the selected nodes and edges from their current group",
        "operationId" : "group/remove",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "edgeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of edges. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify edges by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              },
              "groupName" : {
                "type" : "string",
                "example" : "MyLocus",
                "description" : "Specifies the name used to identify the group. "
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "nodeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of nodes. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify nodes by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/group/rename" : {
      "post" : {
        "tags" : [ "group" ],
        "summary" : "Rename a group",
        "description" : "Changes the name of the selected group or groups",
        "operationId" : "group/rename",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "groupName" : {
                "type" : "string",
                "example" : "MyLocus",
                "description" : "Specifies the name used to identify the group. "
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "newName" : {
                "type" : "string",
                "example" : "ImprovedLocus",
                "description" : "Specifies the NEW name used to identify the group. "
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/group/ungroup" : {
      "post" : {
        "tags" : [ "group" ],
        "summary" : "Ungroup a set of previously grouped nodes",
        "description" : "Ungroups one or more groups, expanding them if they are collapsed and removing the group nodes.",
        "operationId" : "group/ungroup",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "nodeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of nodes. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify nodes by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "groups" : [ 123, 124 ]
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/idmapper/map column" : {
      "post" : {
        "tags" : [ "idmapper" ],
        "summary" : "Map a column contents to another id format",
        "description" : "Uses the BridgeDB service to look up analogous identifiers from a wide selection of other databases",
        "operationId" : "idmapper/map column",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "required" : [ "columnName", "mapFrom", "mapTo", "species" ],
            "properties" : {
              "columnName" : {
                "type" : "string",
                "example" : "name",
                "description" : "Specifies the column nmae where the source identifiers are located",
                "enum" : [ ]
              },
              "forceSingle" : {
                "type" : "string",
                "example" : "true",
                "description" : "When multiple identifiers can be mapped from a single term, this forces a singular result"
              },
              "mapFrom" : {
                "type" : "string",
                "example" : "Ensembl",
                "description" : "Specifies the database describing the existing identifiers",
                "enum" : [ ]
              },
              "mapTo" : {
                "type" : "string",
                "example" : "SGD",
                "description" : "Specifies the database identifiers to be looked up",
                "enum" : [ ]
              },
              "networkName" : {
                "type" : "string",
                "example" : "current",
                "description" : "Which network is used in the mapping"
              },
              "species" : {
                "type" : "string",
                "example" : "Yeast",
                "description" : "The combined common or latin name of the species to which the identifiers apply",
                "enum" : [ "Human (Homo sapiens)", "Mouse (Mus musculus)", "Rat (Rattus norvegicus)", "Frog (Xenopus tropicalis)", "Zebra fish (Danio rerio)", "Fruit fly (Drosophila melanogaster)", "Mosquito (Anopheles gambiae)", "Arabidopsis thaliana (Arabidopsis thaliana)", "Yeast (Saccharomyces cerevisiae)", "E. coli (Escherichia coli)", "Tuberculosis (Mycobacterium tuberculosis)", "Worm (Caenorhabditis elegans)" ]
              },
              "table" : {
                "type" : "string",
                "example" : "default node",
                "description" : "Which table is used as the source of the identifiers"
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "new column" : "mappedIDs"
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/layout/apply preferred" : {
      "post" : {
        "tags" : [ "layout" ],
        "summary" : "Execute the preferred layout on a network",
        "description" : "Executes the current preferred layout. Default is ```grid```.",
        "operationId" : "layout/apply preferred",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "networkSelected" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/layout/attribute-circle" : {
      "post" : {
        "tags" : [ "layout" ],
        "summary" : "Execute the Attribute Circle Layout on a network",
        "operationId" : "layout/attribute-circle",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "EdgeAttribute" : {
                "type" : "string",
                "example" : "weight",
                "description" : "The name of the edge column containing numeric values that will be used as weights in the layout algorithm. Only columns containing numeric values are shown"
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "NodeAttribute" : {
                "type" : "string",
                "example" : "weight",
                "description" : "The name of the node column containing numeric values that will be used as weights in the layout algorithm. Only columns containing numeric values are shown"
              },
              "nodeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of nodes. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify nodes by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              },
              "singlePartition" : {
                "type" : "string",
                "example" : "false",
                "description" : "Don't partition graph before layout, only boolean values allowed: ```true``` or ```false```"
              },
              "spacing" : {
                "type" : "string",
                "example" : "100.0",
                "description" : "Circle size, in numeric value"
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/layout/attributes-layout" : {
      "post" : {
        "tags" : [ "layout" ],
        "summary" : "Execute the Group Attributes Layout on a network",
        "operationId" : "layout/attributes-layout",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "EdgeAttribute" : {
                "type" : "string",
                "example" : "weight",
                "description" : "The name of the edge column containing numeric values that will be used as weights in the layout algorithm. Only columns containing numeric values are shown"
              },
              "maxwidth" : {
                "type" : "string",
                "example" : "5000.0",
                "description" : "Maximum width of a row, in numeric value"
              },
              "minrad" : {
                "type" : "string",
                "example" : "100.0",
                "description" : "Minimum width of a partition, in numeric value"
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "NodeAttribute" : {
                "type" : "string",
                "example" : "weight",
                "description" : "The name of the node column containing numeric values that will be used as weights in the layout algorithm. Only columns containing numeric values are shown"
              },
              "nodeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of nodes. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify nodes by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              },
              "radmult" : {
                "type" : "string",
                "example" : "50.0",
                "description" : "Minimum width of a partition, in numeric value"
              },
              "spacingx" : {
                "type" : "string",
                "example" : "400.0",
                "description" : "Horizontal spacing between two partitions in a row, in numeric value"
              },
              "spacingy" : {
                "type" : "string",
                "example" : "400.0",
                "description" : "Vertical spacing between the largest partitions of two rows, in numeric value"
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/layout/circular" : {
      "post" : {
        "tags" : [ "layout" ],
        "summary" : "Execute the Circular Layout on a network",
        "operationId" : "layout/circular",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "EdgeAttribute" : {
                "type" : "string",
                "example" : "weight",
                "description" : "The name of the edge column containing numeric values that will be used as weights in the layout algorithm. Only columns containing numeric values are shown"
              },
              "leftEdge" : {
                "type" : "string",
                "example" : "32",
                "description" : "Left edge margin, in numeric value"
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "NodeAttribute" : {
                "type" : "string",
                "example" : "weight",
                "description" : "The name of the node column containing numeric values that will be used as weights in the layout algorithm. Only columns containing numeric values are shown"
              },
              "nodeHorizontalSpacing" : {
                "type" : "string",
                "example" : "64",
                "description" : "Horizontal spacing between nodes, in numeric value"
              },
              "nodeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of nodes. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify nodes by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              },
              "nodeVerticalSpacing" : {
                "type" : "string",
                "example" : "32",
                "description" : "Vertical spacing between nodes, in numeric value"
              },
              "rightMargin" : {
                "type" : "string",
                "example" : "1000",
                "description" : "Right edge margin, in numeric value"
              },
              "singlePartition" : {
                "type" : "string",
                "example" : "false",
                "description" : "Don't partition graph before layout; only boolean values are allowed: ```true``` or ```false```"
              },
              "topEdge" : {
                "type" : "string",
                "example" : "32",
                "description" : "Top edge margin, in numeric value"
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/layout/copycat" : {
      "post" : {
        "tags" : [ "layout" ],
        "summary" : "Copy network layout from one network view to another",
        "description" : "Sets the coordinates for each node in the target network to the coordinates of a matching node in the source network.\n\nOptional parameters such as ```gridUnmapped``` and ```selectUnmapped``` determine the behavior of target network nodes that could not be matched.",
        "operationId" : "layout/copycat",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "required" : [ "sourceColumn", "sourceNetwork", "targetColumn", "targetNetwork" ],
            "properties" : {
              "gridUnmapped" : {
                "type" : "string",
                "example" : "true",
                "description" : "If this is set to ```true```, any nodes in the target network that could not be matched to a node in the source network will be laid out in a grid"
              },
              "selectUnmapped" : {
                "type" : "string",
                "example" : "true",
                "description" : "If this is set to ```true```, any nodes in the target network that could not be matched to a node in the source network will be selected in the target network"
              },
              "sourceColumn" : {
                "type" : "string",
                "example" : "name",
                "description" : "The name of column in the node table used to match nodes",
                "enum" : [ "name", "shared name" ]
              },
              "sourceNetwork" : {
                "type" : "string",
                "description" : "The name of network to get node coordinates from",
                "enum" : [ "cy:command_documentation_generation" ]
              },
              "targetColumn" : {
                "type" : "string",
                "example" : "name",
                "description" : "The name of column in the node table used to match nodes",
                "enum" : [ "name", "shared name" ]
              },
              "targetNetwork" : {
                "type" : "string",
                "description" : "The name of the network to apply coordinates to.",
                "enum" : [ "cy:command_documentation_generation" ]
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "mappedNodeCount" : 100,
                  "unmappedNodeCount" : 0
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/layout/cose" : {
      "post" : {
        "tags" : [ "layout" ],
        "summary" : "Execute the Compound Spring Embedder (CoSE) on a network",
        "operationId" : "layout/cose",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "compoundGravityRange" : {
                "type" : "string",
                "example" : "50",
                "description" : "Compound gravity range (0-100)"
              },
              "compoundGravityStrength" : {
                "type" : "string",
                "example" : "50",
                "description" : "Compound gravity strength (0-100)"
              },
              "EdgeAttribute" : {
                "type" : "string",
                "example" : "weight",
                "description" : "The name of the edge column containing numeric values that will be used as weights in the layout algorithm. Only columns containing numeric values are shown"
              },
              "gravityRange" : {
                "type" : "string",
                "example" : "50",
                "description" : "Gravity range (0-100)"
              },
              "gravityStrength" : {
                "type" : "string",
                "example" : "50",
                "description" : "Gravity strength (0-100)"
              },
              "idealEdgeLength" : {
                "type" : "string",
                "example" : "50",
                "description" : "Ideal edge length, any positive integer"
              },
              "incremental" : {
                "type" : "string",
                "example" : "false",
                "description" : "Incremental; whether the algorithm will be applied incrementally; boolean values only, ```true``` or ```false```; defaults to ```false```"
              },
              "LayoutQuality" : {
                "type" : "string",
                "example" : "Default",
                "description" : "Layout quality; allowed values are ```Proof```, ```Default``` and ```Draft```",
                "enum" : [ "Proof", "Default", "Draft" ]
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "NodeAttribute" : {
                "type" : "string",
                "example" : "weight",
                "description" : "The name of the node column containing numeric values that will be used as weights in the layout algorithm. Only columns containing numeric values are shown"
              },
              "nodeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of nodes. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify nodes by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              },
              "repulsionStrength" : {
                "type" : "string",
                "example" : "50",
                "description" : "Repulsion strength (0-100)"
              },
              "smartEdgeLengthCalc" : {
                "type" : "string",
                "example" : "true",
                "description" : "Use smart edge length calculation; boolean values only, ```true``` or ```false```; defaults to ```true```"
              },
              "smartRepulsionRangeCalc" : {
                "type" : "string",
                "example" : "true",
                "description" : "Use smart repulsion range calculation; boolean values only, ```true``` or ```false```; defaults to ```true```"
              },
              "springStrength" : {
                "type" : "string",
                "example" : "50",
                "description" : "Spring strength (0-100)"
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/layout/degree-circle" : {
      "post" : {
        "tags" : [ "layout" ],
        "summary" : "Execute the Degree Sorted Circle Layout on a network",
        "operationId" : "layout/degree-circle",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "EdgeAttribute" : {
                "type" : "string",
                "example" : "weight",
                "description" : "The name of the edge column containing numeric values that will be used as weights in the layout algorithm. Only columns containing numeric values are shown"
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "NodeAttribute" : {
                "type" : "string",
                "example" : "weight",
                "description" : "The name of the node column containing numeric values that will be used as weights in the layout algorithm. Only columns containing numeric values are shown"
              },
              "nodeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of nodes. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify nodes by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              },
              "singlePartition" : {
                "type" : "string",
                "example" : "false",
                "description" : "Don't partition graph before layout; boolean values only, ```true``` or ```false```; defaults to ```false```"
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/layout/force-directed" : {
      "post" : {
        "tags" : [ "layout" ],
        "summary" : "Execute the Prefuse Force Directed Layout on a network",
        "operationId" : "layout/force-directed",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "defaultEdgeWeight" : {
                "type" : "string",
                "example" : "0.5",
                "description" : "The default edge weight to consider, default is 0.5 "
              },
              "defaultNodeMass" : {
                "type" : "string",
                "example" : "3.0",
                "description" : "Default Node Mass, in numeric value"
              },
              "defaultSpringCoefficient" : {
                "type" : "string",
                "example" : "1e-4",
                "description" : "Default Spring Coefficient, in numeric value"
              },
              "defaultSpringLength" : {
                "type" : "string",
                "example" : "50.0",
                "description" : "Default Spring Length, in numeric value"
              },
              "EdgeAttribute" : {
                "type" : "string",
                "example" : "weight",
                "description" : "The name of the edge column containing numeric values that will be used as weights in the layout algorithm. Only columns containing numeric values are shown"
              },
              "isDeterministic" : {
                "type" : "string",
                "example" : "false",
                "description" : "Force deterministic layouts (slower); boolean values only, ```true``` or ```false```; defaults to ```false```"
              },
              "maxWeightCutoff" : {
                "type" : "string",
                "example" : "1000",
                "description" : "The maximum edge weight to consider, default to the Double.MAX value"
              },
              "minWeightCutoff" : {
                "type" : "string",
                "example" : "0",
                "description" : "The minimum edge weight to consider, numeric values, default is 0"
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "NodeAttribute" : {
                "type" : "string",
                "example" : "weight",
                "description" : "The name of the node column containing numeric values that will be used as weights in the layout algorithm. Only columns containing numeric values are shown"
              },
              "nodeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of nodes. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify nodes by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              },
              "numIterations" : {
                "type" : "string",
                "example" : "100",
                "description" : "Number of Iterations, in numeric value"
              },
              "singlePartition" : {
                "type" : "string",
                "example" : "false",
                "description" : "Don't partition graph before layout; boolean values only, ```true``` or ```false```; defaults to ```false```"
              },
              "Type" : {
                "type" : "string",
                "example" : "Heuristic",
                "description" : "How to interpret weight values; must be one of ```Heuristic```, ```-Log(value)```, ```1 - normalized value``` and ```normalized value```. Defaults to ```Heuristic```",
                "enum" : [ "Heuristic", "-Log(value)", "1 - normalized value", "normalized value" ]
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/layout/fruchterman-rheingold" : {
      "post" : {
        "tags" : [ "layout" ],
        "summary" : "Execute the Edge-weighted Force directed (BioLayout) on a network",
        "operationId" : "layout/fruchterman-rheingold",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "attraction_multiplier" : {
                "type" : "string",
                "example" : ".03",
                "description" : "Divisor to calculate the attraction force, in numeric value"
              },
              "conflict_avoidance" : {
                "type" : "string",
                "example" : "20",
                "description" : "Constant force applied to avoid conflicts, in numeric value"
              },
              "defaultEdgeWeight" : {
                "type" : "string",
                "example" : "0.5",
                "description" : "The default edge weight to consider, default is 0.5 "
              },
              "EdgeAttribute" : {
                "type" : "string",
                "example" : "weight",
                "description" : "The name of the edge column containing numeric values that will be used as weights in the layout algorithm. Only columns containing numeric values are shown"
              },
              "gravity_multiplier" : {
                "type" : "string",
                "example" : "1",
                "description" : "Multiplier to calculate the gravity force, in numeric value"
              },
              "layout3D" : {
                "type" : "string",
                "example" : "false",
                "description" : "Layout nodes in 3D; boolean values only, ```true``` or ```false```; defaults to ```true```"
              },
              "max_distance_factor" : {
                "type" : "string",
                "example" : "20",
                "description" : "Percent of graph used for node repulsion calculations, in numeric value"
              },
              "maxWeightCutoff" : {
                "type" : "string",
                "example" : "1000",
                "description" : "The maximum edge weight to consider, default to the Double.MAX value"
              },
              "minWeightCutoff" : {
                "type" : "string",
                "example" : "0",
                "description" : "The minimum edge weight to consider, numeric values, default is 0"
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "nIterations" : {
                "type" : "string",
                "example" : "500",
                "description" : "Number of iterations, in numeric value"
              },
              "NodeAttribute" : {
                "type" : "string",
                "example" : "weight",
                "description" : "The name of the node column containing numeric values that will be used as weights in the layout algorithm. Only columns containing numeric values are shown"
              },
              "nodeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of nodes. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify nodes by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              },
              "randomize" : {
                "type" : "string",
                "example" : "true",
                "description" : "Randomize graph before layout; boolean values only, ```true``` or ```false```; defaults to ```true```"
              },
              "repulsion_multiplier" : {
                "type" : "string",
                "example" : "0.04",
                "description" : "Multiplier to calculate the repulsion force, in numeric value"
              },
              "singlePartition" : {
                "type" : "string",
                "example" : "false",
                "description" : "Don't partition graph before layout; boolean values only, ```true``` or ```false```; defaults to ```false```"
              },
              "spread_factor" : {
                "type" : "string",
                "example" : "2",
                "description" : "Amount of extra room for layout, in numeric value"
              },
              "temperature" : {
                "type" : "string",
                "example" : "80",
                "description" : "Initial temperature, in numeric value"
              },
              "Type" : {
                "type" : "string",
                "example" : "Heuristic",
                "description" : "How to interpret weight values; must be one of ```Heuristic```, ```-Log(value)```, ```1 - normalized value``` and ```normalized value```. Defaults to ```Heuristic```",
                "enum" : [ "Heuristic", "-Log(value)", "1 - normalized value", "normalized value" ]
              },
              "update_iterations" : {
                "type" : "string",
                "example" : "0",
                "description" : "Number of iterations before updating display, in numeric value (0: update only at end)"
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/layout/get preferred" : {
      "post" : {
        "tags" : [ "layout" ],
        "summary" : "Return the current preferred layout",
        "description" : "Returns the name of the current preferred layout or empty string if not set. Default is ```grid```.",
        "operationId" : "layout/get preferred",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "network" : {
                "type" : "string",
                "description" : "Gets the name of the current preferred layout"
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : "grid",
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/layout/grid" : {
      "post" : {
        "tags" : [ "layout" ],
        "summary" : "Execute the Grid Layout on a network",
        "operationId" : "layout/grid",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "EdgeAttribute" : {
                "type" : "string",
                "example" : "weight",
                "description" : "The name of the edge column containing numeric values that will be used as weights in the layout algorithm. Only columns containing numeric values are shown"
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "NodeAttribute" : {
                "type" : "string",
                "example" : "weight",
                "description" : "The name of the node column containing numeric values that will be used as weights in the layout algorithm. Only columns containing numeric values are shown"
              },
              "nodeHorizontalSpacing" : {
                "type" : "string",
                "example" : "80.0",
                "description" : "Horizontal spacing between nodes, in numeric value"
              },
              "nodeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of nodes. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify nodes by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              },
              "nodeVerticalSpacing" : {
                "type" : "string",
                "example" : "40.0",
                "description" : "Vertical spacing between nodes, in numeric value"
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/layout/hierarchical" : {
      "post" : {
        "tags" : [ "layout" ],
        "summary" : "Execute the Hierarchical Layout on a network",
        "operationId" : "layout/hierarchical",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "bandGap" : {
                "type" : "string",
                "example" : "64",
                "description" : "Band gap, in numeric value"
              },
              "componentSpacing" : {
                "type" : "string",
                "example" : "64",
                "description" : "Component spacing, in numeric value"
              },
              "EdgeAttribute" : {
                "type" : "string",
                "example" : "weight",
                "description" : "The name of the edge column containing numeric values that will be used as weights in the layout algorithm. Only columns containing numeric values are shown"
              },
              "leftEdge" : {
                "type" : "string",
                "example" : "32",
                "description" : "Left edge margin, in numeric value"
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "NodeAttribute" : {
                "type" : "string",
                "example" : "weight",
                "description" : "The name of the node column containing numeric values that will be used as weights in the layout algorithm. Only columns containing numeric values are shown"
              },
              "nodeHorizontalSpacing" : {
                "type" : "string",
                "example" : "64",
                "description" : "Horizontal spacing between nodes, in numeric value"
              },
              "nodeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of nodes. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify nodes by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              },
              "nodeVerticalSpacing" : {
                "type" : "string",
                "example" : "32",
                "description" : "Vertical spacing between nodes, in numeric value"
              },
              "rightMargin" : {
                "type" : "string",
                "example" : "7000",
                "description" : "Right edge margin, in numeric value"
              },
              "topEdge" : {
                "type" : "string",
                "example" : "32",
                "description" : "Top edge margin, in numeric value"
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/layout/isom" : {
      "post" : {
        "tags" : [ "layout" ],
        "summary" : "Execute the Inverted Self-Organizing Map Layout on a network",
        "operationId" : "layout/isom",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "coolingFactor" : {
                "type" : "string",
                "example" : "2",
                "description" : "Cooling factor, in numeric value"
              },
              "EdgeAttribute" : {
                "type" : "string",
                "example" : "weight",
                "description" : "The name of the edge column containing numeric values that will be used as weights in the layout algorithm. Only columns containing numeric values are shown"
              },
              "initialAdaptation" : {
                "type" : "string",
                "example" : "0.9",
                "description" : "Initial adaptation, in numeric value"
              },
              "maxEpoch" : {
                "type" : "string",
                "example" : "5000",
                "description" : "Number of iterations, in numeric value"
              },
              "minAdaptation" : {
                "type" : "string",
                "example" : "0",
                "description" : "Minimum adaptation value, in numeric value"
              },
              "minRadius" : {
                "type" : "string",
                "example" : "1",
                "description" : "Minimum radius, in numeric value"
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "NodeAttribute" : {
                "type" : "string",
                "example" : "weight",
                "description" : "The name of the node column containing numeric values that will be used as weights in the layout algorithm. Only columns containing numeric values are shown"
              },
              "nodeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of nodes. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify nodes by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              },
              "radius" : {
                "type" : "string",
                "example" : "20",
                "description" : "Radius, in numeric value"
              },
              "radiusConstantTime" : {
                "type" : "string",
                "example" : "100",
                "description" : "Radius constant, in numeric value"
              },
              "singlePartition" : {
                "type" : "string",
                "example" : "false",
                "description" : "Don't partition graph before layout; boolean values only, ```true``` or ```false```; defaults to ```false```"
              },
              "sizeFactor" : {
                "type" : "string",
                "example" : "100",
                "description" : "Size factor, in numeric value"
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/layout/kamada-kawai" : {
      "post" : {
        "tags" : [ "layout" ],
        "summary" : "Execute the Edge-weighted Spring Embedded Layout on a network",
        "operationId" : "layout/kamada-kawai",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "defaultEdgeWeight" : {
                "type" : "string",
                "example" : "0.5",
                "description" : "The default edge weight to consider, default is 0.5 "
              },
              "EdgeAttribute" : {
                "type" : "string",
                "example" : "weight",
                "description" : "The name of the edge column containing numeric values that will be used as weights in the layout algorithm. Only columns containing numeric values are shown"
              },
              "m_anticollisionSpringStrength" : {
                "type" : "string",
                "example" : "0.0",
                "description" : "Strength to apply to avoid collisions, in numeric value"
              },
              "m_averageIterationsPerNode" : {
                "type" : "string",
                "example" : "40",
                "description" : "Average number of iteratations for each node, in numeric value"
              },
              "m_disconnectedNodeDistanceSpringRestLength" : {
                "type" : "string",
                "example" : "2000.0",
                "description" : "Rest length of a 'disconnected' spring, in numeric value"
              },
              "m_disconnectedNodeDistanceSpringStrength" : {
                "type" : "string",
                "example" : "0.05",
                "description" : "Strength of a 'disconnected' spring, in numeric value"
              },
              "m_layoutPass" : {
                "type" : "string",
                "example" : "2",
                "description" : "Number of layout passes, in numeric value"
              },
              "m_nodeDistanceRestLengthConstant" : {
                "type" : "string",
                "example" : "45.0",
                "description" : "Spring rest length, in numeric value"
              },
              "m_nodeDistanceStrengthConstant" : {
                "type" : "string",
                "example" : "15.0",
                "description" : "Spring strength, in numeric value"
              },
              "maxWeightCutoff" : {
                "type" : "string",
                "example" : "1000",
                "description" : "The maximum edge weight to consider, default to the Double.MAX value"
              },
              "minWeightCutoff" : {
                "type" : "string",
                "example" : "0",
                "description" : "The minimum edge weight to consider, numeric values, default is 0"
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "NodeAttribute" : {
                "type" : "string",
                "example" : "weight",
                "description" : "The name of the node column containing numeric values that will be used as weights in the layout algorithm. Only columns containing numeric values are shown"
              },
              "nodeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of nodes. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify nodes by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              },
              "randomize" : {
                "type" : "string",
                "example" : "true",
                "description" : "Randomize graph before layout; boolean values only, ```true``` or ```false```; defaults to ```true```"
              },
              "singlePartition" : {
                "type" : "string",
                "example" : "false",
                "description" : "Don't partition graph before layout; boolean values only, ```true``` or ```false```; defaults to ```false```"
              },
              "Type" : {
                "type" : "string",
                "example" : "Heuristic",
                "description" : "How to interpret weight values; must be one of ```Heuristic```, ```-Log(value)```, ```1 - normalized value``` and ```normalized value```. Defaults to ```Heuristic```",
                "enum" : [ "Heuristic", "-Log(value)", "1 - normalized value", "normalized value" ]
              },
              "unweighted" : {
                "type" : "string",
                "example" : "false",
                "description" : "Use unweighted edges; boolean values only, ```true``` or ```false```; defaults to ```false```"
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/layout/set preferred" : {
      "post" : {
        "tags" : [ "layout" ],
        "summary" : "Set the preferred layout",
        "description" : "Sets the preferred layout. Takes a specific name as defined in the API Default is ```grid```.",
        "operationId" : "layout/set preferred",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "preferredLayout" : {
                "type" : "string",
                "example" : "grid",
                "description" : "Layout to use as preferred, for allowed names see Layout API",
                "enum" : [ "attribute-circle", "stacked-node-layout", "degree-circle", "circular", "attributes-layout", "kamada-kawai", "force-directed", "cose", "grid", "hierarchical", "fruchterman-rheingold", "isom" ]
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/layout/stacked-node-layout" : {
      "post" : {
        "tags" : [ "layout" ],
        "summary" : "Execute the Stacked Node Layout on a network",
        "operationId" : "layout/stacked-node-layout",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "EdgeAttribute" : {
                "type" : "string",
                "example" : "weight",
                "description" : "The name of the edge column containing numeric values that will be used as weights in the layout algorithm. Only columns containing numeric values are shown"
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "NodeAttribute" : {
                "type" : "string",
                "example" : "weight",
                "description" : "The name of the node column containing numeric values that will be used as weights in the layout algorithm. Only columns containing numeric values are shown"
              },
              "nodeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of nodes. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify nodes by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              },
              "x_position" : {
                "type" : "string",
                "example" : "10.0",
                "description" : "X start position, in numeric value"
              },
              "y_start_position" : {
                "type" : "string",
                "example" : "10.0",
                "description" : "Y start position, in numeric value"
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/network/add" : {
      "post" : {
        "tags" : [ "network" ],
        "summary" : "Add nodes and edges to a network (they must be in the current collection)",
        "description" : "Adds nodes and edges to an existing network.  The nodes and edges to be added must already exist in the network collection.  This command is most often used to populate a subnetwork with selected nodes and edges from a parent network.",
        "operationId" : "network/add",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "edgeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of edges. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify edges by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "nodeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of nodes. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify nodes by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "nodes" : [ 101, 102, 103 ],
                  "edges" : [ 201, 202, 203 ]
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/network/add edge" : {
      "post" : {
        "tags" : [ "network" ],
        "summary" : "Add an edge between two nodes",
        "description" : "Add a new edge between two existing nodes in a network.  The names of the nodes must be specified and much match the value in the 'name' column for each node",
        "operationId" : "network/add edge",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "required" : [ "sourceName", "targetName" ],
            "properties" : {
              "isDirected" : {
                "type" : "string",
                "example" : "false",
                "description" : "Whether the edge should be directed or not.  Even though all edges in Cytoscape have a source and target, by default they are treated as undirected.  Setting this to 'true' will flag some algorithms to treat them as directed, although many current implementations will ignore this flag."
              },
              "name" : {
                "type" : "string",
                "example" : "Sample Edge",
                "description" : "Set the 'name' and 'shared name' columns for this edge to the provided value."
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "sourceName" : {
                "type" : "string",
                "example" : "Node 1",
                "description" : "Enter the name of an existing node in the network to be the source of the edge.  Note that this is the name as defined in the 'name' column of the network"
              },
              "targetName" : {
                "type" : "string",
                "example" : "Node 2",
                "description" : "Enter the name of an existing node in the network to be the target of the edge.  Note that this is the name as defined in the 'name' column of the network"
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "edge" : 101
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/network/add node" : {
      "post" : {
        "tags" : [ "network" ],
        "summary" : "Add a new node to a network",
        "description" : "Add a new node to an existing network.  The name of the node must be provided.",
        "operationId" : "network/add node",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "name" : {
                "type" : "string",
                "example" : "Node 1",
                "description" : "The name of the node, which will be assigned to both the 'name' and 'shared name' columns"
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "node" : 101
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/network/clone" : {
      "post" : {
        "tags" : [ "network" ],
        "summary" : "Make a copy of the current network",
        "description" : "Create a new network by cloning an existing network. The new network will be created as part of a new network collection.  The SUID of the new network and view (if one is created) are returned.",
        "operationId" : "network/clone",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "network" : 101,
                  "view" : 400
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/network/connect nodes" : {
      "post" : {
        "tags" : [ "network" ],
        "summary" : "Create new edges that connect a list of nodes",
        "description" : "Create new edges that connect a list of nodes",
        "operationId" : "network/connect nodes",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "required" : [ "network", "nodes" ],
            "properties" : {
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "nodes" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of nodes. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify nodes by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "edges" : [ 102, 103 ]
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/network/create" : {
      "post" : {
        "tags" : [ "network" ],
        "summary" : "Create a new network",
        "description" : "Create a new network from a list of nodes and edges in an existing source network. The SUID of the network and view are returned.",
        "operationId" : "network/create",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "edgeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of edges. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify edges by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              },
              "excludeEdges" : {
                "type" : "string",
                "example" : "false",
                "description" : "Unless this is set to true, edges that connect nodes in the nodeList are implicitly included"
              },
              "networkName" : {
                "type" : "string",
                "description" : ""
              },
              "nodeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of nodes. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify nodes by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              },
              "source" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "network" : 102,
                  "view" : 500
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/network/create attribute" : {
      "post" : {
        "tags" : [ "network" ],
        "summary" : "Create a new column in the network table",
        "description" : "Creates a new network column.",
        "operationId" : "network/create attribute",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "column" : {
                "type" : "string",
                "example" : "NewColumn",
                "description" : "Unique name of column"
              },
              "listType" : {
                "type" : "string",
                "example" : "string",
                "description" : "Can be one of `integer`, `long`, `double`, or `string`.",
                "enum" : [ "integer", "long", "double", "string", "boolean" ]
              },
              "namespace" : {
                "type" : "string",
                "example" : "default",
                "description" : "Node, Edge, and Network objects support the ```default```, ```local```, and ```hidden``` namespaces. Root networks also support the ```shared``` namespace. Custom namespaces may be specified by Apps."
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "type" : {
                "type" : "string",
                "example" : "string",
                "description" : "Can be one of `integer`, `long`, `double`, `string`, or `list`.",
                "enum" : [ "integer", "long", "double", "string", "boolean", "list" ]
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "columnName" : "New Column"
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/network/create empty" : {
      "post" : {
        "tags" : [ "network" ],
        "summary" : "Create an empty network",
        "description" : "Create a new, empty network. The new network may be created as part of an existing network collection or a new network collection.",
        "operationId" : "network/create empty",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "name" : {
                "type" : "string",
                "example" : "My New Network",
                "description" : "Enter the name of the new network."
              },
              "renderers" : {
                "type" : "string",
                "example" : "Cytoscape 2D",
                "description" : "Select the renderer to use for the new network view.  By default, the standard Cytoscape 2D renderer (Ding) will be used",
                "enum" : [ ]
              },
              "RootNetworkList" : {
                "type" : "string",
                "example" : "network name",
                "description" : "Choose the network collection the new network should be part of. If no network collection is selected, a new network collection is created.",
                "enum" : [ " -- Create new network collection --", "cy:command_documentation_generation" ]
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "network" : 101
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/network/delete" : {
      "post" : {
        "tags" : [ "network" ],
        "summary" : "Delete nodes or edges from a network",
        "description" : "Deletes nodes and edges provided by the arguments, or if no nodes or edges are provides, the selected nodes and edges.  When deleting nodes, adjacent edges are also deleted.",
        "operationId" : "network/delete",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "edgeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of edges. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify edges by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "nodeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of nodes. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify nodes by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "nodes" : [ 101, 102, 103 ],
                  "edges" : [ 201, 202 ]
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/network/deselect" : {
      "post" : {
        "tags" : [ "network" ],
        "summary" : "Deselect nodes or edges in a network",
        "description" : "Deselect nodes and/or edges in a network.  A list of nodes and/or edges may be provided and those nodes and edges will be deselected.",
        "operationId" : "network/deselect",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "edgeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of edges. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify edges by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "nodeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of nodes. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify nodes by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "nodes" : [ 101, 122, 495 ],
                  "edges" : [ 201, 202, 203 ]
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/network/destroy" : {
      "post" : {
        "tags" : [ "network" ],
        "summary" : "Destroy (delete) a network",
        "description" : "Destroy (delete) a network. The SUID of the destroyed network is returned.",
        "operationId" : "network/destroy",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "network" : 101
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/network/export" : {
      "post" : {
        "tags" : [ "network" ],
        "summary" : "Export a network to a file",
        "description" : "Export a network to a network file (e.g. ``XGMML``, ``SIF``, etc.)",
        "operationId" : "network/export",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "options" : {
                "type" : "string",
                "example" : "CSV",
                "description" : "The format of the output file.",
                "enum" : [ "CX JSON (*.cx)", "Cytoscape.js JSON (*.cyjs)", "GraphML files (*.graphml, *.xml)", "NNF (*.nnf)", "PSI-MI Level 1", "PSI-MI Level 2.5", "SIF (*.sif)", "XGMML (*.xgmml, *.xml)" ]
              },
              "OutputFile" : {
                "type" : "string",
                "description" : ""
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "file" : "/tmp/foo.sif"
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/network/get" : {
      "post" : {
        "tags" : [ "network" ],
        "summary" : "Return a network",
        "description" : "Return a network from the name, SUID, or other identifier.  If the name or SUID doesn't exist, the current network is returned.",
        "operationId" : "network/get",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "shared name" : "my network",
                  "SUID" : 80,
                  "name" : "my network"
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/network/get attribute" : {
      "post" : {
        "tags" : [ "network" ],
        "summary" : "Get the value from a column for a network",
        "description" : "Returns the attributes for the network passed as parameter.",
        "operationId" : "network/get attribute",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "columnList" : {
                "type" : "string",
                "example" : "name,Column B",
                "description" : "A list of column names, separated by commas."
              },
              "namespace" : {
                "type" : "string",
                "example" : "default",
                "description" : "Node, Edge, and Network objects support the ```default```, ```local```, and ```hidden``` namespaces. Root networks also support the ```shared``` namespace. Custom namespaces may be specified by Apps."
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : [ {
                  "name" : "Object 1",
                  "SUID" : 101
                }, {
                  "name" : "Object 2",
                  "SUID" : 102
                } ],
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/network/get properties" : {
      "post" : {
        "tags" : [ "network" ],
        "summary" : "Get the visual property value for a network",
        "description" : "Returns the visual properties for the network that matches the passed parameters.",
        "operationId" : "network/get properties",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "required" : [ "network", "propertyList" ],
            "properties" : {
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "propertyList" : {
                "type" : "string",
                "example" : "background paint,title",
                "description" : "A comma-separated list of network properties"
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : [ {
                  "SUID" : 92,
                  "visualProperties" : [ {
                    "visualProperty" : "NETWORK_BACKGROUND_PAINT",
                    "value" : "#808080"
                  }, {
                    "visualProperty" : "NETWORK_TITLE",
                    "value" : "my network"
                  } ]
                } ],
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/network/hide" : {
      "post" : {
        "tags" : [ "network" ],
        "summary" : "Hide nodes or edges in a network",
        "description" : "Hide nodes and/or edges in a network.  A list of nodes and/or edges may be provided and those nodes and edges will be hidden in the view associated with the provided network.Note that the network '''must''' have a view.  The SUIDs of the hidden nodes and/or edges are returned.",
        "operationId" : "network/hide",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "edgeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of edges. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify edges by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "nodeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of nodes. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify nodes by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "nodes" : [ 101, 122, 495 ],
                  "edges" : [ 201, 202, 203 ]
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/network/import file" : {
      "post" : {
        "tags" : [ "network" ],
        "summary" : "Import a network from a file",
        "description" : "Import a new network from a tabular formatted file type (e.g. ``csv``, ``tsv``, ``Excel``, etc.).  Use ``network load file`` to load network formatted files.  This command will create a new network collection if no current network collection is selected, otherwise it will add the network to the current collection. The SUIDs of the new networks and views are returned.",
        "operationId" : "network/import file",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "required" : [ "file", "indexColumnSourceInteraction" ],
            "properties" : {
              "dataTypeList" : {
                "type" : "string",
                "example" : "string,int,string,double,double",
                "description" : "List of column data types ordered by column index (e.g. \"string,int,long,double,boolean,intlist\" or just \"s,i,l,d,b,il\"):"
              },
              "defaultInteraction" : {
                "type" : "string",
                "example" : "pp",
                "description" : "Used to set the default interaction type to use when there is no interaction type column."
              },
              "delimiters" : {
                "type" : "string",
                "example" : ";,\\,",
                "description" : "Select the delimiters to use to separate columns in the table, from the list '``,``',' ','``TAB``', or '``;``'.  ``TAB`` and '``,``' are used by default = [',', ';', ' ', '\\t']"
              },
              "delimitersForDataList" : {
                "type" : "string",
                "example" : "|,\\",
                "description" : "Select the delimiters to use to separate list entries in a list, from the list '``|``','``\\``','``/``', or '``,``'.  ``|`` is used by default",
                "enum" : [ "\\|", "\\", "/", "," ]
              },
              "file" : {
                "type" : "string",
                "example" : "myFile.csv",
                "description" : "The path to the file that contains the table or network to be imported."
              },
              "firstRowAsColumnNames" : {
                "type" : "string",
                "example" : "false",
                "description" : "If this is ``true`` then the first row should contain the names of the columns. Note that ``startLoadRow`` must be set for this to work properly"
              },
              "indexColumnSourceInteraction" : {
                "type" : "string",
                "example" : "1",
                "description" : "The column index that contains the source node identifiers."
              },
              "indexColumnTargetInteraction" : {
                "type" : "string",
                "example" : "3",
                "description" : "The column index that contains the target node identifiers.  If this is not specified then the resulting network will have no edges"
              },
              "indexColumnTypeInteraction" : {
                "type" : "string",
                "example" : "2",
                "description" : "The column index that contains the interaction type.  This is not required."
              },
              "NetworkViewRendererList" : {
                "type" : "string",
                "example" : "Cytoscape 2D",
                "description" : "Enter the network view renderer that this network should use.  This is only useful if multiple renderers have been installed, which is rare.",
                "enum" : [ ]
              },
              "RootNetworkList" : {
                "type" : "string",
                "example" : "-- Create new network collection --",
                "description" : "The name of the network collection (root network) that the imported network should be part of. A name of ``-- Create new network collection --`` will result in the creation of a new network collection for this import.",
                "enum" : [ "-- Create new network collection --", "cy:command_documentation_generation" ]
              },
              "startLoadRow" : {
                "type" : "string",
                "example" : "1",
                "description" : "The starting row of the import.  This is used to skip over comments and other non-data rows at the beginning of the file."
              },
              "TargetColumnList" : {
                "type" : "string",
                "example" : "share name",
                "description" : "Enter the name of the column in the existing network collection (root network) that you want to map your input identifiers to.",
                "enum" : [ ]
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "networks" : [ 101, 102, 103 ],
                  "views" : [ 200, 201, 204 ]
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/network/import url" : {
      "post" : {
        "tags" : [ "network" ],
        "summary" : "Import a network from a URL",
        "description" : "Import a new network from a URL that points to a tabular formatted file type (e.g. ``csv``, ``tsv``, ``Excel``, etc.).  Use ``network load url`` to load network formatted files.  This command will create a new network collection if no current network collection is selected, otherwise it will add the network to the current collection. The SUIDs of the new networks and views are returned.",
        "operationId" : "network/import url",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "required" : [ "indexColumnSourceInteraction", "url" ],
            "properties" : {
              "dataTypeList" : {
                "type" : "string",
                "example" : "string,int,string,double,double",
                "description" : "List of column data types ordered by column index (e.g. \"string,int,long,double,boolean,intlist\" or just \"s,i,l,d,b,il\"):"
              },
              "defaultInteraction" : {
                "type" : "string",
                "example" : "pp",
                "description" : "Used to set the default interaction type to use when there is no interaction type column."
              },
              "delimiters" : {
                "type" : "string",
                "example" : ";,\\,",
                "description" : "Select the delimiters to use to separate columns in the table, from the list '``,``',' ','``TAB``', or '``;``'.  ``TAB`` and '``,``' are used by default = [',', ';', ' ', '\\t']"
              },
              "delimitersForDataList" : {
                "type" : "string",
                "example" : "|,\\",
                "description" : "Select the delimiters to use to separate list entries in a list, from the list '``|``','``\\``','``/``', or '``,``'.  ``|`` is used by default",
                "enum" : [ "\\|", "\\", "/", "," ]
              },
              "firstRowAsColumnNames" : {
                "type" : "string",
                "example" : "false",
                "description" : "If this is ``true`` then the first row should contain the names of the columns. Note that ``startLoadRow`` must be set for this to work properly"
              },
              "indexColumnSourceInteraction" : {
                "type" : "string",
                "example" : "1",
                "description" : "The column index that contains the source node identifiers."
              },
              "indexColumnTargetInteraction" : {
                "type" : "string",
                "example" : "3",
                "description" : "The column index that contains the target node identifiers.  If this is not specified then the resulting network will have no edges"
              },
              "indexColumnTypeInteraction" : {
                "type" : "string",
                "example" : "2",
                "description" : "The column index that contains the interaction type.  This is not required."
              },
              "NetworkViewRendererList" : {
                "type" : "string",
                "example" : "Cytoscape 2D",
                "description" : "Enter the network view renderer that this network should use.  This is only useful if multiple renderers have been installed, which is rare.",
                "enum" : [ ]
              },
              "RootNetworkList" : {
                "type" : "string",
                "example" : "-- Create new network collection --",
                "description" : "The name of the network collection (root network) that the imported network should be part of. A name of ``-- Create new network collection --`` will result in the creation of a new network collection for this import.",
                "enum" : [ "-- Create new network collection --", "cy:command_documentation_generation" ]
              },
              "startLoadRow" : {
                "type" : "string",
                "example" : "1",
                "description" : "The starting row of the import.  This is used to skip over comments and other non-data rows at the beginning of the file."
              },
              "TargetColumnList" : {
                "type" : "string",
                "example" : "share name",
                "description" : "Enter the name of the column in the existing network collection (root network) that you want to map your input identifiers to.",
                "enum" : [ ]
              },
              "url" : {
                "type" : "string",
                "example" : "https://www.my.domain.org/mywebpage/myFile.csv",
                "description" : "The URL of the file or resource that provides the table or network to be imported."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "networks" : [ 101, 102, 103 ],
                  "views" : [ 200, 201, 204 ]
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/network/list" : {
      "post" : {
        "tags" : [ "network" ],
        "summary" : "List all of the available networks",
        "description" : "List all of the networks in the current session.",
        "operationId" : "network/list",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "networks" : [ 102, 103 ]
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/network/list attributes" : {
      "post" : {
        "tags" : [ "network" ],
        "summary" : "List all of the columns for networks",
        "description" : "Returns a list of column names assocated with a network.",
        "operationId" : "network/list attributes",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "namespace" : {
                "type" : "string",
                "example" : "default",
                "description" : "Node, Edge, and Network objects support the ```default```, ```local```, and ```hidden``` namespaces. Root networks also support the ```shared``` namespace. Custom namespaces may be specified by Apps."
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : [ "SUID", "shared name", "name", "selected", "__Annotations", "publication" ],
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/network/list properties" : {
      "post" : {
        "tags" : [ "network" ],
        "summary" : "List all of the visual properties for networks",
        "description" : "List all of the visual properties for networks",
        "operationId" : "network/list properties",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : [ "Background Paint", "Node Selection", "Edge Selection" ],
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/network/load file" : {
      "post" : {
        "tags" : [ "network" ],
        "summary" : "Load a network file (e.g. XGMML)",
        "description" : "Load a new network from a network file type (e.g. ``SIF``, ``XGMML``, etc.).  Use ``network import file`` to load networks from Excel or csv files.  This command will create a new network collection if no current network collection is selected, otherwise it will add the network to the current collection.\tThe SUIDs of the new networks and views are returned.",
        "operationId" : "network/load file",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "required" : [ "file" ],
            "properties" : {
              "file" : {
                "type" : "string",
                "description" : "Select a network format file.  This command does not support csv or Excel files.  Use ``network import file`` for that."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "networks" : [ 101, 102, 103 ],
                  "views" : [ 200, 201, 204 ]
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/network/load url" : {
      "post" : {
        "tags" : [ "network" ],
        "summary" : "Load a network file (e.g. XGMML) from a url",
        "description" : "Load a new network from a URL that points to a network file type (e.g. ``SIF``, ``XGMML``, etc.).  Use ``network import url`` to load networks from Excel or csv files.  This command will create a new network collection if no current network collection is selected, otherwise it will add the network to the current collection.\tThe SUIDs of the new networks and views are returned.",
        "operationId" : "network/load url",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "required" : [ "url" ],
            "properties" : {
              "url" : {
                "type" : "string",
                "example" : "http://www.mydomain.edu/exampleNetworks/galFiltered.sif",
                "description" : "Select a URL that points to a network format file.  This command does not support csv or Excel files.  Use ``network import url`` for that."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "networks" : [ 101, 102, 103 ],
                  "views" : [ 200, 201, 204 ]
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/network/rename" : {
      "post" : {
        "tags" : [ "network" ],
        "summary" : "Rename a network",
        "description" : "Rename an existing network.  The SUID of the network is returned",
        "operationId" : "network/rename",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "required" : [ "name", "sourceNetwork" ],
            "properties" : {
              "name" : {
                "type" : "string",
                "example" : "My network name",
                "description" : "Enter a new title for the network"
              },
              "sourceNetwork" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "network" : 101,
                  "title" : "My title"
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/network/select" : {
      "post" : {
        "tags" : [ "network" ],
        "summary" : "Select nodes or edges in a network",
        "description" : "Select nodes and/or edges in a network.  This command provides options to invert the selection, add first neighbors, add adjacent edges of selected nodes, and add adjacent nodes of selected edges",
        "operationId" : "network/select",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "adjacentEdges" : {
                "type" : "string",
                "example" : "false",
                "description" : "If 'true', then select any edges adjacent to any selected nodes.  This happens before any inversion"
              },
              "edgeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of edges. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify edges by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              },
              "extendEdges" : {
                "type" : "string",
                "example" : "false",
                "description" : "If 'true', then select any nodes adjacent to any selected edges.  This happens before any inversion"
              },
              "firstNeighbors" : {
                "type" : "string",
                "example" : "none",
                "description" : "If this option is anything other than 'none', add nodes to the selection based on the value of the argument.  If 'incoming', add nodes to the selection that have edges pointing to one of the selected nodes.  If 'output', add nodes to the selection that have edges that point to them from one of the selected nodes.  If 'undirected' add any neighbors that have undirected edges connecting to any of the selected nodes. Finally, if 'any', then add all first neighbors to the selection list.",
                "enum" : [ "none", "incoming", "outgoing", "undirected", "any" ]
              },
              "invert" : {
                "type" : "string",
                "example" : "none",
                "description" : "If this option is not 'none', then the selected nodes or edges (or both) will be deselected and all other nodes or edges will be selected",
                "enum" : [ "none", "nodes", "edges", "both" ]
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "nodeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of nodes. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify nodes by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "nodes" : [ 101, 122, 495 ],
                  "edges" : [ 201, 202, 203 ]
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/network/set attribute" : {
      "post" : {
        "tags" : [ "network" ],
        "summary" : "Set a value in the network table",
        "description" : "Sets the value of a specified column for the passed network.",
        "operationId" : "network/set attribute",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "columnList" : {
                "type" : "string",
                "example" : "name,Column B",
                "description" : "A list of column names, separated by commas."
              },
              "namespace" : {
                "type" : "string",
                "example" : "default",
                "description" : "Node, Edge, and Network objects support the ```default```, ```local```, and ```hidden``` namespaces. Root networks also support the ```shared``` namespace. Custom namespaces may be specified by Apps."
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "valueList" : {
                "type" : "string",
                "example" : "New Name,2",
                "description" : "A list of values, separated by commas. List values can be included using the format ```[value1,value2]```."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/network/set current" : {
      "post" : {
        "tags" : [ "network" ],
        "summary" : "Set the current network",
        "description" : "Sets the current network, which can also be null.",
        "operationId" : "network/set current",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/network/set properties" : {
      "post" : {
        "tags" : [ "network" ],
        "summary" : "Set network visual properties",
        "description" : "Sets the value of a specified property for the passed network.",
        "operationId" : "network/set properties",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "required" : [ "propertyList", "valueList" ],
            "properties" : {
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "propertyList" : {
                "type" : "string",
                "example" : "background paint,title",
                "description" : "A comma-separated list of network properties"
              },
              "valueList" : {
                "type" : "string",
                "example" : "white,My network title",
                "description" : "A comma-separated list of property values.  This list must have the same number of elements as the ``propertyList``.  Each value will be applied to the property specified in the same position in the ``propertyList``"
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/network/show" : {
      "post" : {
        "tags" : [ "network" ],
        "summary" : "Show hidden nodes and edges",
        "description" : "Show nodes and/or edges in a network.  A list of nodes and/or edges may be provided and those nodes and edges will be unhidden in the view associated with the provided network.Note that the network '''must''' have a view.  The SUIDs of the unhidden nodes and/or edges are returned.",
        "operationId" : "network/show",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "edgeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of edges. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify edges by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "nodeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of nodes. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify nodes by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "nodes" : [ 101, 122, 495 ],
                  "edges" : [ 201, 202, 203 ]
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/node/create attribute" : {
      "post" : {
        "tags" : [ "node" ],
        "summary" : "Create a new column for nodes",
        "description" : "Creates a new node column.",
        "operationId" : "node/create attribute",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "column" : {
                "type" : "string",
                "example" : "NewColumn",
                "description" : "Unique name of column"
              },
              "listType" : {
                "type" : "string",
                "example" : "string",
                "description" : "Can be one of `integer`, `long`, `double`, or `string`.",
                "enum" : [ "integer", "long", "double", "string", "boolean" ]
              },
              "namespace" : {
                "type" : "string",
                "example" : "default",
                "description" : "Node, Edge, and Network objects support the ```default```, ```local```, and ```hidden``` namespaces. Root networks also support the ```shared``` namespace. Custom namespaces may be specified by Apps."
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "type" : {
                "type" : "string",
                "example" : "string",
                "description" : "Can be one of `integer`, `long`, `double`, `string`, or `list`.",
                "enum" : [ "integer", "long", "double", "string", "boolean", "list" ]
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "columnName" : "New Column"
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/node/get" : {
      "post" : {
        "tags" : [ "node" ],
        "summary" : "Get a node from a network",
        "description" : "Returns the SUID of a node that matches the passed parameters. If multiple nodes are found, only one will be returned, and a warning will be printed.",
        "operationId" : "node/get",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "node" : {
                "type" : "string",
                "example" : "Node 1",
                "description" : "Selects a node by name, or, if the parameter has the prefix ```suid:```, selects a node by SUID."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "node" : 101
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/node/get attribute" : {
      "post" : {
        "tags" : [ "node" ],
        "summary" : "Get values from the node table",
        "description" : "Returns the attributes for the nodes passed as parameters.",
        "operationId" : "node/get attribute",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "columnList" : {
                "type" : "string",
                "example" : "name,Column B",
                "description" : "A list of column names, separated by commas."
              },
              "namespace" : {
                "type" : "string",
                "example" : "default",
                "description" : "Node, Edge, and Network objects support the ```default```, ```local```, and ```hidden``` namespaces. Root networks also support the ```shared``` namespace. Custom namespaces may be specified by Apps."
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "nodeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of nodes. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify nodes by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : [ {
                  "name" : "Object 1",
                  "SUID" : 101
                }, {
                  "name" : "Object 2",
                  "SUID" : 102
                } ],
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/node/get properties" : {
      "post" : {
        "tags" : [ "node" ],
        "summary" : "Get visual properties for a node",
        "description" : "Returns the visual properties for the nodes that match the passed parameters.",
        "operationId" : "node/get properties",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "nodeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of nodes. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify nodes by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              },
              "propertyList" : {
                "type" : "string",
                "example" : "Paint,Visible",
                "description" : "A list of property names separated by commas."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : [ {
                  "SUID" : 92,
                  "visualProperties" : [ {
                    "visualProperty" : "NODE_PAINT",
                    "value" : "#808080"
                  }, {
                    "visualProperty" : "NODE_VISIBLE",
                    "value" : true
                  } ]
                } ],
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/node/list" : {
      "post" : {
        "tags" : [ "node" ],
        "summary" : "List all of the nodes in a network",
        "description" : "Returns a list of the node SUIDs associated with the passed network parameter.",
        "operationId" : "node/list",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "nodeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of nodes. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify nodes by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "nodes" : [ 101, 102 ]
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/node/list attributes" : {
      "post" : {
        "tags" : [ "node" ],
        "summary" : "List all of the columns for nodes",
        "description" : "Returns a list of column names assocated with nodes.",
        "operationId" : "node/list attributes",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "namespace" : {
                "type" : "string",
                "example" : "default",
                "description" : "Node, Edge, and Network objects support the ```default```, ```local```, and ```hidden``` namespaces. Root networks also support the ```shared``` namespace. Custom namespaces may be specified by Apps."
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : [ "SUID", "name" ],
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/node/list properties" : {
      "post" : {
        "tags" : [ "node" ],
        "summary" : "List all of the visual properties for nodes",
        "description" : "Returns a list of visual properties available for nodes.",
        "operationId" : "node/list properties",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : [ "Paint", "Visible" ],
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/node/rename" : {
      "post" : {
        "tags" : [ "node" ],
        "summary" : "Rename a node",
        "description" : "Sets the value of the name column for the passed node.",
        "operationId" : "node/rename",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "newName" : {
                "type" : "string",
                "description" : "New name of the node"
              },
              "node" : {
                "type" : "string",
                "example" : "suid:123",
                "description" : "Selects a node by name, or, if the parameter has the prefix ```suid:```, selects a node by SUID."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/node/select from file" : {
      "post" : {
        "tags" : [ "node" ],
        "summary" : "Select nodes from a file",
        "description" : "Selects nodes in the current network based on node names provided by a file.",
        "operationId" : "node/select from file",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "file" : {
                "type" : "string",
                "description" : "Path to file containing list of nodes to select"
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : true,
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/node/set attribute" : {
      "post" : {
        "tags" : [ "node" ],
        "summary" : "Change node table values for a node or set of nodes",
        "description" : "Sets the value of a specified column for the passed node or set of nodes.",
        "operationId" : "node/set attribute",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "columnList" : {
                "type" : "string",
                "example" : "name,Column B",
                "description" : "A list of column names, separated by commas."
              },
              "namespace" : {
                "type" : "string",
                "example" : "default",
                "description" : "Node, Edge, and Network objects support the ```default```, ```local```, and ```hidden``` namespaces. Root networks also support the ```shared``` namespace. Custom namespaces may be specified by Apps."
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "nodeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of nodes. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify nodes by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              },
              "valueList" : {
                "type" : "string",
                "example" : "New Name,2",
                "description" : "A list of values, separated by commas. List values can be included using the format ```[value1,value2]```."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/node/set properties" : {
      "post" : {
        "tags" : [ "node" ],
        "summary" : "Set node visual properties",
        "description" : "Sets the value of a specified property for the passed node or set of nodes.",
        "operationId" : "node/set properties",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              },
              "nodeList" : {
                "type" : "string",
                "example" : "selected",
                "description" : "Specifies a list of nodes. The keywords ```all```, ```selected```, or ```unselected``` can be used to specify nodes by their selection state. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values."
              },
              "propertyList" : {
                "type" : "string",
                "example" : "Paint, Visible",
                "description" : "A list of property names separated by commas."
              },
              "valueList" : {
                "type" : "string",
                "example" : "#808080,true",
                "description" : "A list of values separated by commas."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/session/new" : {
      "post" : {
        "tags" : [ "session" ],
        "summary" : "Create a new, empty session",
        "description" : "Destroys the current session and creates a new, empty one.",
        "operationId" : "session/new",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "destroyCurrentSession" : {
                "type" : "string",
                "description" : "Deprecated since version 3.6."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/session/open" : {
      "post" : {
        "tags" : [ "session" ],
        "summary" : "Open a session from a file",
        "description" : "Opens a session from a local file or URL.",
        "operationId" : "session/open",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "file" : {
                "type" : "string",
                "example" : "/Users/johndoe/Downloads/MySession.cys",
                "description" : "The path to the session file (.cys) to be loaded."
              },
              "url" : {
                "type" : "string",
                "example" : "/Users/johndoe/Downloads/MySession.cys",
                "description" : "A URL that provides a session file."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/session/save" : {
      "post" : {
        "tags" : [ "session" ],
        "summary" : "Save the session",
        "description" : "Saves the current session to an existing file, which will be replaced. If this is a new session that has not been saved yet, use 'save as' instead.",
        "operationId" : "session/save",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "required" : [ "file" ],
            "properties" : {
              "file" : {
                "type" : "string",
                "example" : "/Users/johndoe/Downloads/MySession.cys",
                "description" : "The path name of the file where the current session must be saved to."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/session/save as" : {
      "post" : {
        "tags" : [ "session" ],
        "summary" : "Save the session to a file",
        "description" : "Saves the current session as a new file.",
        "operationId" : "session/save as",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "required" : [ "file" ],
            "properties" : {
              "file" : {
                "type" : "string",
                "example" : "/Users/johndoe/Downloads/MySession.cys",
                "description" : "The path name of the file where the current session must be saved to."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/table/add row" : {
      "post" : {
        "tags" : [ "table" ],
        "summary" : "Add a new row to a table",
        "description" : "Appends an additional row of empty cells to the current table",
        "operationId" : "table/add row",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "keyValue" : {
                "type" : "string",
                "example" : "BRCA",
                "description" : "Specifies the primary key of a value in the row of a table  Note that network, node, and edge tables ``must`` have Long values as keys"
              },
              "table" : {
                "type" : "string",
                "example" : "galFiltered.sif default node",
                "description" : "Specifies a table by table name. If the prefix ```SUID:``` is used, the table corresponding the SUID will be returned."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "table" : 101,
                  "row" : "row key"
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/table/create column" : {
      "post" : {
        "tags" : [ "table" ],
        "summary" : "Create a new column in a table",
        "description" : "Appends an additional column of attribute values to the current table",
        "operationId" : "table/create column",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "columnName" : {
                "type" : "string",
                "example" : "Uncertainty",
                "description" : "The new column name"
              },
              "listType" : {
                "type" : "string",
                "example" : "string",
                "description" : "Can be one of `integer`, `long`, `double`, or `string`.",
                "enum" : [ "integer", "long", "double", "string", "boolean" ]
              },
              "table" : {
                "type" : "string",
                "example" : "galFiltered.sif default node",
                "description" : "Specifies a table by table name. If the prefix ```SUID:``` is used, the table corresponding the SUID will be returned."
              },
              "type" : {
                "type" : "string",
                "example" : "string",
                "description" : "Can be one of `integer`, `long`, `double`, `string`, or `list`.",
                "enum" : [ "integer", "long", "double", "string", "boolean", "list" ]
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "table" : 101,
                  "column" : "uncertainty"
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/table/create table" : {
      "post" : {
        "tags" : [ "table" ],
        "summary" : "Create a new table",
        "description" : "Adds a new table to the network.",
        "operationId" : "table/create table",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "keyColumn" : {
                "type" : "string",
                "example" : "Property",
                "description" : "Specifies the name of a column in the table"
              },
              "keyColumnType" : {
                "type" : "string",
                "example" : "Double",
                "description" : "The syntactical type of the value used in the key",
                "enum" : [ "integer", "long", "double", "string", "boolean" ]
              },
              "title" : {
                "type" : "string",
                "example" : "Nodes",
                "description" : "The name of the table used in the current network"
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "table" : 101
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/table/delete column" : {
      "post" : {
        "tags" : [ "table" ],
        "summary" : "Delete a column from a table",
        "description" : "Remove a column from a table, specified by its name.  Returns the name of the column removed.",
        "operationId" : "table/delete column",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "column" : {
                "type" : "string",
                "example" : "Property",
                "description" : "Specifies the name of a column in the table"
              },
              "table" : {
                "type" : "string",
                "example" : "galFiltered.sif default node",
                "description" : "Specifies a table by table name. If the prefix ```SUID:``` is used, the table corresponding the SUID will be returned."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "table" : 101,
                  "column" : "defunct"
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/table/delete row" : {
      "post" : {
        "tags" : [ "table" ],
        "summary" : "Delete a row from a table",
        "description" : "Deletes a row from a table.Requires the table name or SUID and the row key.",
        "operationId" : "table/delete row",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "required" : [ "keyValue" ],
            "properties" : {
              "keyValue" : {
                "type" : "string",
                "example" : "BRCA",
                "description" : "Specifies the primary key of a value in the row of a table"
              },
              "table" : {
                "type" : "string",
                "example" : "galFiltered.sif default node",
                "description" : "Specifies a table by table name. If the prefix ```SUID:``` is used, the table corresponding the SUID will be returned."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "table" : 101,
                  "key" : "62"
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/table/destroy" : {
      "post" : {
        "tags" : [ "table" ],
        "summary" : "Destroy (delete) an entire table",
        "description" : "Removes the specified table from the network. ",
        "operationId" : "table/destroy",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "table" : {
                "type" : "string",
                "example" : "galFiltered.sif default node",
                "description" : "Specifies a table by table name. If the prefix ```SUID:``` is used, the table corresponding the SUID will be returned."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "table" : 101
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/table/export" : {
      "post" : {
        "tags" : [ "table" ],
        "summary" : "Export a table to a file",
        "description" : "Creates a file with name <FILE> and writes the table there.",
        "operationId" : "table/export",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "options" : {
                "type" : "string",
                "example" : "CSV",
                "description" : "The format of the output file.",
                "enum" : [ "CSV (*.csv)" ]
              },
              "OutputFile" : {
                "type" : "string",
                "example" : "myfile.csv",
                "description" : "The path of the file to export the table to.  Note that the file will be overwritten if it exists."
              },
              "table" : {
                "type" : "string",
                "example" : "galFiltered.sif default node",
                "description" : "Specifies a table by table name. If the prefix ```SUID:``` is used, the table corresponding the SUID will be returned."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "file" : "myfile.csv"
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/table/get column" : {
      "post" : {
        "tags" : [ "table" ],
        "summary" : "Get the information about a table column",
        "description" : "Get the information about a table column.",
        "operationId" : "table/get column",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "column" : {
                "type" : "string",
                "example" : "Property",
                "description" : "Specifies the name of a column in the table"
              },
              "table" : {
                "type" : "string",
                "example" : "galFiltered.sif default node",
                "description" : "Specifies a table by table name. If the prefix ```SUID:``` is used, the table corresponding the SUID will be returned."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "name" : "New name",
                  "type" : "String",
                  "immutable" : false,
                  "primaryKey" : false,
                  "values" : [ "EGFR", "BRCA1", "BRCA2" ]
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/table/get row" : {
      "post" : {
        "tags" : [ "table" ],
        "summary" : "Return all values in a table row",
        "description" : "Returns the values in each column of a row of a table.",
        "operationId" : "table/get row",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "keyValue" : {
                "type" : "string",
                "example" : "Key",
                "description" : "Specifies a row of a table using the primary key as the indentifier"
              },
              "table" : {
                "type" : "string",
                "example" : "galFiltered.sif default node",
                "description" : "Specifies a table by table name. If the prefix ```SUID:``` is used, the table corresponding the SUID will be returned."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "table" : 101,
                  "SUID" : 101,
                  "name" : "mynode"
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/table/get value" : {
      "post" : {
        "tags" : [ "table" ],
        "summary" : "Return a single value from a table",
        "description" : "Returns the value from a cell as specified by row and column ids",
        "operationId" : "table/get value",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "column" : {
                "type" : "string",
                "example" : "Property",
                "description" : "Specifies the name of a column in the table"
              },
              "keyValue" : {
                "type" : "string",
                "example" : "Key",
                "description" : "Specifies a row of a table using the primary key as the indentifier"
              },
              "table" : {
                "type" : "string",
                "example" : "galFiltered.sif default node",
                "description" : "Specifies a table by table name. If the prefix ```SUID:``` is used, the table corresponding the SUID will be returned."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ {
                  "status" : 500,
                  "type" : "urn:cytoscape:ci:cyrest-core:v1:handle-json-command:errors:3",
                  "message" : "Task returned invalid json."
                } ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/table/import file" : {
      "post" : {
        "tags" : [ "table" ],
        "summary" : "Import a table from a file",
        "description" : "This uses a long list of input parameters to specify the attributes of the table, the mapping keys, and the destination table for the input.",
        "operationId" : "table/import file",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "required" : [ "file" ],
            "properties" : {
              "caseSensitiveNetworkCollectionKeys" : {
                "type" : "string",
                "example" : "false",
                "description" : "Determines whether capitalization is considered in matching and sorting"
              },
              "caseSensitiveNetworkKeys" : {
                "type" : "string",
                "example" : "false",
                "description" : "Determines whether capitalization is considered in matching and sorting"
              },
              "dataTypeList" : {
                "type" : "string",
                "example" : "s,s,i",
                "description" : "List of column data types ordered by column index (e.g. \"string,int,long,double,boolean,intlist\" or just \"s,i,l,d,b,il\")"
              },
              "DataTypeTargetForNetworkCollection" : {
                "type" : "string",
                "example" : "Node Table Columns",
                "description" : "Select whether to import the data as ```Node Table Columns```, ```Edge Table Columns```, or ```Network Table Columns```",
                "enum" : [ "Node Table Columns", "Edge Table Columns", "Network Table Columns" ]
              },
              "DataTypeTargetForNetworkList" : {
                "type" : "string",
                "example" : "int",
                "description" : "The data type of the targets",
                "enum" : [ "Node Table Columns", "Edge Table Columns", "Network Table Columns" ]
              },
              "delimiters" : {
                "type" : "string",
                "example" : "',','\\t'",
                "description" : "The list of delimiters that separate columns in the table. = [',', ';', ' ', '\\t']"
              },
              "delimitersForDataList" : {
                "type" : "string",
                "example" : "'|'",
                "description" : "The delimiters between elements of list columns in the table.",
                "enum" : [ "\\|", "\\", "/", "," ]
              },
              "file" : {
                "type" : "string",
                "example" : "myFile.csv",
                "description" : "The path to the file that contains the table or network to be imported."
              },
              "firstRowAsColumnNames" : {
                "type" : "string",
                "example" : "true",
                "description" : "If the first imported row contains column names, set this to ```true```."
              },
              "KeyColumnForMapping" : {
                "type" : "string",
                "example" : "name",
                "description" : "The column in the network to use as the merge key",
                "enum" : [ "shared name" ]
              },
              "KeyColumnForMappingNetworkList" : {
                "type" : "string",
                "example" : "name",
                "description" : "The column in the network to use as the merge key",
                "enum" : [ "name", "shared name" ]
              },
              "keyColumnIndex" : {
                "type" : "string",
                "example" : "1",
                "description" : "The column that contains the key values for this import.  These values will be used to match with the key values in the network."
              },
              "newTableName" : {
                "type" : "string",
                "example" : "Supplemental Info",
                "description" : "The title of the new table"
              },
              "startLoadRow" : {
                "type" : "string",
                "example" : "10",
                "description" : "The first row of the input table to load.  This allows the skipping of headers that are not part of the import."
              },
              "TargetNetworkCollection" : {
                "type" : "string",
                "example" : "galFiltered.sif",
                "description" : "The network collection to use for the table import",
                "enum" : [ "cy:command_documentation_generation" ]
              },
              "TargetNetworkList" : {
                "type" : "string",
                "example" : "all",
                "description" : "The list of networks into which the table is imported = ['cy:command_documentation_generation']"
              },
              "WhereImportTable" : {
                "type" : "string",
                "example" : "To a Network Collection",
                "description" : "Determines what network(s) the imported table will be associated with (if any).  A table can be imported into a ```Network Collection```, ```Selected networks``` or ```to an unassigned table```.",
                "enum" : [ "To a Network Collection", "To selected networks only", "To an unassigned table" ]
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "mappedTables" : [ 101, 102 ]
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/table/import url" : {
      "post" : {
        "tags" : [ "table" ],
        "summary" : "Import a table from a URL",
        "description" : "Similar to Import Table this uses a long list of input parameters to specify the attributes of the table, the mapping keys, and the destination table for the input.",
        "operationId" : "table/import url",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "required" : [ "url" ],
            "properties" : {
              "caseSensitiveNetworkCollectionKeys" : {
                "type" : "string",
                "example" : "false",
                "description" : "Determines whether capitalization is considered in matching and sorting"
              },
              "caseSensitiveNetworkKeys" : {
                "type" : "string",
                "example" : "false",
                "description" : "Determines whether capitalization is considered in matching and sorting"
              },
              "dataTypeList" : {
                "type" : "string",
                "example" : "s,s,i",
                "description" : "List of column data types ordered by column index (e.g. \"string,int,long,double,boolean,intlist\" or just \"s,i,l,d,b,il\")"
              },
              "DataTypeTargetForNetworkCollection" : {
                "type" : "string",
                "example" : "Node Table Columns",
                "description" : "Select whether to import the data as ```Node Table Columns```, ```Edge Table Columns```, or ```Network Table Columns```",
                "enum" : [ "Node Table Columns", "Edge Table Columns", "Network Table Columns" ]
              },
              "DataTypeTargetForNetworkList" : {
                "type" : "string",
                "example" : "int",
                "description" : "The data type of the targets",
                "enum" : [ "Node Table Columns", "Edge Table Columns", "Network Table Columns" ]
              },
              "delimiters" : {
                "type" : "string",
                "example" : "',','\\t'",
                "description" : "The list of delimiters that separate columns in the table. = [',', ';', ' ', '\\t']"
              },
              "delimitersForDataList" : {
                "type" : "string",
                "example" : "'|'",
                "description" : "The delimiters between elements of list columns in the table.",
                "enum" : [ "\\|", "\\", "/", "," ]
              },
              "firstRowAsColumnNames" : {
                "type" : "string",
                "example" : "true",
                "description" : "If the first imported row contains column names, set this to ```true```."
              },
              "KeyColumnForMapping" : {
                "type" : "string",
                "example" : "name",
                "description" : "The column in the network to use as the merge key",
                "enum" : [ "shared name" ]
              },
              "KeyColumnForMappingNetworkList" : {
                "type" : "string",
                "example" : "name",
                "description" : "The column in the network to use as the merge key",
                "enum" : [ "name", "shared name" ]
              },
              "keyColumnIndex" : {
                "type" : "string",
                "example" : "1",
                "description" : "The column that contains the key values for this import.  These values will be used to match with the key values in the network."
              },
              "newTableName" : {
                "type" : "string",
                "example" : "Supplemental Info",
                "description" : "The title of the new table"
              },
              "startLoadRow" : {
                "type" : "string",
                "example" : "10",
                "description" : "The first row of the input table to load.  This allows the skipping of headers that are not part of the import."
              },
              "TargetNetworkCollection" : {
                "type" : "string",
                "example" : "galFiltered.sif",
                "description" : "The network collection to use for the table import",
                "enum" : [ "cy:command_documentation_generation" ]
              },
              "TargetNetworkList" : {
                "type" : "string",
                "example" : "all",
                "description" : "The list of networks into which the table is imported = ['cy:command_documentation_generation']"
              },
              "url" : {
                "type" : "string",
                "example" : "https://www.my.domain.org/mywebpage/myFile.csv",
                "description" : "The URL of the file or resource that provides the table or network to be imported."
              },
              "WhereImportTable" : {
                "type" : "string",
                "example" : "To a Network Collection",
                "description" : "Determines what network(s) the imported table will be associated with (if any).  A table can be imported into a ```Network Collection```, ```Selected networks``` or ```to an unassigned table```.",
                "enum" : [ "To a Network Collection", "To selected networks only", "To an unassigned table" ]
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "mappedTables" : [ 101, 102 ]
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/table/list" : {
      "post" : {
        "tags" : [ "table" ],
        "summary" : "List all of the registered tables",
        "description" : "Returns a list of the table SUIDs associated with the passed network parameter.",
        "operationId" : "table/list",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "includePrivate" : {
                "type" : "string",
                "example" : "true",
                "description" : "A boolean value determining whether to return private as well as public tables"
              },
              "namespace" : {
                "type" : "string",
                "example" : "all",
                "description" : "An optional argument to contrain output to a single namespace, or ALL"
              },
              "type" : {
                "type" : "string",
                "example" : "all",
                "description" : "One of ''network'', ''node'', ''edge'', ''unattached'', ''all'', to constrain the type of table listed",
                "enum" : [ "network", "node", "edge", "unattached", "all" ]
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "tables" : [ 101, 102, 104 ]
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/table/list columns" : {
      "post" : {
        "tags" : [ "table" ],
        "summary" : "List all of the columns in a table",
        "description" : "Returns the list of columns in the table",
        "operationId" : "table/list columns",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "table" : {
                "type" : "string",
                "example" : "galFiltered.sif default node",
                "description" : "Specifies a table by table name. If the prefix ```SUID:``` is used, the table corresponding the SUID will be returned."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : [ "name", "degree" ],
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/table/list rows" : {
      "post" : {
        "tags" : [ "table" ],
        "summary" : "List all of the rows in a table",
        "description" : "Returns the list of primary keys for each of the rows in the specified table",
        "operationId" : "table/list rows",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "rowList" : {
                "type" : "string",
                "example" : "name:BRCA1,name:BRCA2,name:EGFR",
                "description" : "Specifies a list of rows. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values. This parameter can also be set to ```all``` to include all rows."
              },
              "table" : {
                "type" : "string",
                "example" : "galFiltered.sif default node",
                "description" : "Specifies a table by table name. If the prefix ```SUID:``` is used, the table corresponding the SUID will be returned."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "table" : 123,
                  "rows" : [ "101", "102", "103" ]
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/table/merge" : {
      "post" : {
        "tags" : [ "table" ],
        "summary" : "Merge tables together",
        "description" : "Merge tables together joining around a designated key column.  Depending on the arguments, might merge into multiple local tables.",
        "operationId" : "table/merge",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "DataTypeTargetForNetworkCollection" : {
                "type" : "string",
                "example" : "MyCollection",
                "description" : "The collection of networks where the merged table will reside",
                "enum" : [ "Node Table Columns", "Edge Table Columns", "Network Table Columns" ]
              },
              "dataTypeTargetForNetworkList" : {
                "type" : "string",
                "description" : "",
                "enum" : [ "Node Table Columns", "Edge Table Columns", "Network Table Columns" ]
              },
              "mergeType" : {
                "type" : "string",
                "example" : "Copy Columns",
                "description" : "A choice between ''Copy Columns'' and ''Link To Columns'' that determines if replicates are created",
                "enum" : [ "Copy Columns" ]
              },
              "SourceMergeColumns" : {
                "type" : "string",
                "example" : "PrimaryKey,SecondaryKey",
                "description" : "A list of columns that will be brought into the merged table = []"
              },
              "SourceMergeKey" : {
                "type" : "string",
                "example" : "primary",
                "description" : "The name of the columns that exists in both tables and is used to join rows",
                "enum" : [ "name", "shared name" ]
              },
              "SourceTable" : {
                "type" : "string",
                "example" : "default node table",
                "description" : "The name of the table used as the base data in the merge",
                "enum" : [ "cy:command_documentation_generation default node", "cy:command_documentation_generation default edge" ]
              },
              "TargetKeyNetworkCollection" : {
                "type" : "string",
                "example" : "primary",
                "description" : "The name of the primary column about which the merge is made",
                "enum" : [ "shared name" ]
              },
              "TargetMergeKey" : {
                "type" : "string",
                "description" : "",
                "enum" : [ "No Tables Found" ]
              },
              "TargetNetworkCollection" : {
                "type" : "string",
                "example" : "all",
                "description" : "The group of networks that will be merged into the source table",
                "enum" : [ "cy:command_documentation_generation" ]
              },
              "TargetNetworkList" : {
                "type" : "string",
                "example" : "all",
                "description" : "The list of networks where the merged table will be added = ['cy:command_documentation_generation']"
              },
              "UnassignedTable" : {
                "type" : "string",
                "description" : "",
                "enum" : [ "No Tables Found" ]
              },
              "WhereMergeTable" : {
                "type" : "string",
                "example" : "Selected Networks",
                "description" : "The destination path of the resultant merged table.  The choices are ''Network Collection'', ''Selected Networks'', or ''All Unassigned Tables''.",
                "enum" : [ "a network collection", "selected networks only", "an unassigned table" ]
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "tables" : [ 101, 102 ]
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/table/rename column" : {
      "post" : {
        "tags" : [ "table" ],
        "summary" : "Rename a column in a table",
        "description" : "Changes the name of a specified column in the table.",
        "operationId" : "table/rename column",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "required" : [ "columnName", "newColumnName" ],
            "properties" : {
              "columnName" : {
                "type" : "string",
                "example" : "ColumnName",
                "description" : "The name of the column that will be renamed."
              },
              "newColumnName" : {
                "type" : "string",
                "example" : "NewColumnName",
                "description" : "The new name of the column."
              },
              "table" : {
                "type" : "string",
                "example" : "galFiltered.sif default node",
                "description" : "Specifies a table by table name. If the prefix ```SUID:``` is used, the table corresponding the SUID will be returned."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "table" : 101,
                  "column" : "New Column"
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/table/set title" : {
      "post" : {
        "tags" : [ "table" ],
        "summary" : "Set the title of a table",
        "description" : "Changes the visible identifier of a single table",
        "operationId" : "table/set title",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "table" : {
                "type" : "string",
                "example" : "galFiltered.sif default node",
                "description" : "Specifies a table by table name. If the prefix ```SUID:``` is used, the table corresponding the SUID will be returned."
              },
              "title" : {
                "type" : "string",
                "example" : "Filtered Edges",
                "description" : "The name of the table used in the current network"
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "table" : 101,
                  "title" : "My Title"
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/table/set values" : {
      "post" : {
        "tags" : [ "table" ],
        "summary" : "Set values in a table",
        "description" : "Set all the values in the specified list of rows with a single value",
        "operationId" : "table/set values",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "columnName" : {
                "type" : "string",
                "example" : "Property",
                "description" : "Specifies the name of a column in the table"
              },
              "rowList" : {
                "type" : "string",
                "example" : "name:BRCA1,name:BRCA2,name:EGFR",
                "description" : "Specifies a list of rows. The pattern ```COLUMN:VALUE``` sets this parameter to any rows that contain the specified column value; if the ```COLUMN``` prefix is not used, the NAME column is matched by default. A list of ```COLUMN:VALUE``` pairs of the format ```COLUMN1:VALUE1,COLUMN2:VALUE2,...``` can be used to match multiple values. This parameter can also be set to ```all``` to include all rows."
              },
              "table" : {
                "type" : "string",
                "example" : "galFiltered.sif default node",
                "description" : "Specifies a table by table name. If the prefix ```SUID:``` is used, the table corresponding the SUID will be returned."
              },
              "value" : {
                "type" : "string",
                "example" : "BRCA",
                "description" : "The value to set the columns in the selected rows to.  This should be a string value, which will be converted to the appropriate column type."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "table" : 101,
                  "rows" : [ "key1", "key1", "key1" ]
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/view/create" : {
      "post" : {
        "tags" : [ "view" ],
        "summary" : "Create a new view for a network",
        "description" : "Creates a new view for the passed network and returns the SUID of the new view and the original network. If no networks are specified, it creates a view for the current network, if there is one.",
        "operationId" : "view/create",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "layout" : {
                "type" : "string",
                "example" : "false",
                "description" : "If true (default), the preferred layout will be applied to the new view. If false, no layout will be applied."
              },
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "network" : 101,
                  "view" : 400
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/view/destroy" : {
      "post" : {
        "tags" : [ "view" ],
        "summary" : "Destroy the selected network views",
        "description" : "Destroys all selected network views and returns their SUIDs. If no views are selected, this command does nothing.",
        "operationId" : "view/destroy",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "destroyCurrentNetworkView" : {
                "type" : "string",
                "description" : "Deprecated since version 3.6."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "views" : [ 343, 521, 770 ]
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/view/export" : {
      "post" : {
        "tags" : [ "view" ],
        "summary" : "Export the current view to a graphics file",
        "description" : "Exports the current view to a graphics file and returns the path to the saved file. PNG and JPEG formats have options for scaling, while other formats only have the option 'exportTextAsFont'. For the PDF format, exporting text as font does not work for two-byte characters such as Chinese or Japanese. To avoid corrupted texts in the exported PDF, please set false to 'exportTextAsFont' when exporting networks including those non-English characters.",
        "operationId" : "view/export",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "Height" : {
                "type" : "string",
                "example" : "600.0",
                "description" : "The height of the exported image. Valid only for bitmap formats, such as PNG and JPEG."
              },
              "options" : {
                "type" : "string",
                "example" : "CSV",
                "description" : "The format of the output file.",
                "enum" : [ "JPEG (*.jpeg, *.jpg)", "PDF (*.pdf)", "PNG (*.png)", "PostScript (*.ps)", "SVG (*.svg)" ]
              },
              "OutputFile" : {
                "type" : "string",
                "example" : "/Users/johndoe/Downloads/View1.png",
                "description" : "The path name of the file where the view must be saved to. By default, the view's title is used as the file name."
              },
              "Resolution" : {
                "type" : "string",
                "example" : "72",
                "description" : "The resolution of the exported image, in DPI. Valid only for bitmap formats, when the selected width and height 'units' is ```inches```. The possible values are: ```72``` (default), ```100```, ```150```, ```300```, ```600```.",
                "enum" : [ "72", "100", "150", "300", "600" ]
              },
              "Units" : {
                "type" : "string",
                "example" : "inches",
                "description" : "The units for the 'width' and 'height' values. Valid only for bitmap formats, such as PNG and JPEG. The possible values are: ```pixels``` (default), ```inches```.",
                "enum" : [ "pixels", "inches" ]
              },
              "Width" : {
                "type" : "string",
                "example" : "800.0",
                "description" : "The width of the exported image. Valid only for bitmap formats, such as PNG and JPEG."
              },
              "Zoom" : {
                "type" : "string",
                "example" : "200.0",
                "description" : "The zoom value to proportionally scale the image. The default value is ```100.0```. Valid only for bitmap formats, such as PNG and JPEG."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "file" : "/Users/johndoe/Documents/MyNetwork.pdf"
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/view/fit content" : {
      "post" : {
        "tags" : [ "view" ],
        "summary" : "Fit all of the nodes and edges into the view",
        "description" : "Zooms out the current view in order to display all of its elements.",
        "operationId" : "view/fit content",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/view/fit selected" : {
      "post" : {
        "tags" : [ "view" ],
        "summary" : "Fit the selected nodes and edges into the view",
        "description" : "Changes the current view's zoom and viewport so the selected nodes and edges fit into the view area.",
        "operationId" : "view/fit selected",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/view/get current" : {
      "post" : {
        "tags" : [ "view" ],
        "summary" : "Get the current view",
        "description" : "Returns the current view or null if there is none.",
        "operationId" : "view/get current",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "view" : 136
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/view/list" : {
      "post" : {
        "tags" : [ "view" ],
        "summary" : "List views",
        "description" : "Returns a list with the passed network's views or an empty list if there are no views. If a network is not specified, it assumes the current network.",
        "operationId" : "view/list",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "views" : [ 90, 136 ]
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/view/set current" : {
      "post" : {
        "tags" : [ "view" ],
        "summary" : "Set the current view",
        "description" : "Sets the current view, which can also be null.",
        "operationId" : "view/set current",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/view/update" : {
      "post" : {
        "tags" : [ "view" ],
        "summary" : "Update (repaint) a view",
        "description" : "Updates and repaints all views of the specified network.",
        "operationId" : "view/update",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "properties" : {
              "network" : {
                "type" : "string",
                "example" : "current",
                "description" : "Specifies a network by name, or by SUID if the prefix ```SUID:``` is used. The keyword ```CURRENT```, or a blank value can also be used to specify the current network."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : { },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/vizmap/apply" : {
      "post" : {
        "tags" : [ "vizmap" ],
        "summary" : "Apply a style",
        "description" : "Applies the specified style to the selected views and returns the SUIDs of the affected views.",
        "operationId" : "vizmap/apply",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "required" : [ "styles" ],
            "properties" : {
              "styles" : {
                "type" : "string",
                "example" : "Minimal",
                "description" : "Name of Style to be applied to the selected views.",
                "enum" : [ "Sample2", "Sample3", "Curved", "default", "BioPAX_SIF", "Nested Network Style", "Solid", "BioPAX", "Ripple", "Big Labels", "size_rank", "Marquee", "Gradient1", "Minimal", "default black", "Universe", "Sample1", "Directed" ]
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "views" : [ 322, 420 ]
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/vizmap/export" : {
      "post" : {
        "tags" : [ "vizmap" ],
        "summary" : "Export styles to a file",
        "description" : "Exports the specified styles to a Cytoscape vizmap (XML) or a Cytoscape.js (JSON) file and returns the path to the saved file.",
        "operationId" : "vizmap/export",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "required" : [ "OutputFile" ],
            "properties" : {
              "options" : {
                "type" : "string",
                "example" : "CSV",
                "description" : "The format of the output file.",
                "enum" : [ "Style XML (*.xml)", "Style for cytoscape.js (*.json)" ]
              },
              "OutputFile" : {
                "type" : "string",
                "example" : "/Users/johndoe/Downloads/MyStyles.xml",
                "description" : "The path name of the file where the styles must be saved to."
              },
              "styles" : {
                "type" : "string",
                "example" : "Minimal,default,Directed",
                "description" : "The styles to be exported. If no styles are specified, only the current one is exported. = ['Big Labels', 'BioPAX', 'BioPAX_SIF', 'Curved', 'default', 'default black', 'Directed', 'Gradient1', 'Marquee', 'Minimal', 'Nested Network Style', 'Ripple', 'Sample1', 'Sample2', 'Sample3', 'size_rank', 'Solid', 'Universe']"
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : {
                  "file" : "/Users/johndoe/Downloads/MyStyles.json"
                },
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands/vizmap/load file" : {
      "post" : {
        "tags" : [ "vizmap" ],
        "summary" : "Load styles from a file",
        "description" : "Loads styles from a vizmap (XML or properties) file and returns the names of the loaded styles.",
        "operationId" : "vizmap/load file",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "required" : [ "file" ],
            "properties" : {
              "file" : {
                "type" : "string",
                "example" : "/Users/johndoe/Downloads/MyStyles.xml",
                "description" : "XML or properties file where one or more styles have been saved to."
              }
            },
            "title" : "Command Arguments",
            "description" : "A list of command arguments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "example" : {
                "data" : [ "My Style 1", "My Style 2" ],
                "errors" : [ ]
              },
              "properties" : {
                "data" : {
                  "type" : "object"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CIError"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "definitions" : {
    "CIError" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "integer",
          "format" : "int32"
        },
        "type" : {
          "type" : "string"
        },
        "message" : {
          "type" : "string"
        },
        "link" : {
          "type" : "string",
          "format" : "uri"
        }
      }
    }
  },
  "externalDocs" : {
    "description" : "Cytoscape",
    "url" : "http://cytoscape.org/"
  }
}
