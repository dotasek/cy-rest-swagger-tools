{
  "swagger" : "2.0",
  "info" : {
    "description" : "A RESTful service for accessing Cytoscape 3.",
    "version" : "V2.0.0",
    "title" : "CyREST API"
  },
  "host" : "localhost:1234",
  "tags" : [ {
    "name" : "Collections",
    "description" : ""
  }, {
    "name" : "Commands",
    "description" : ""
  }, {
    "name" : "Cytoscape System",
    "description" : ""
  }, {
    "name" : "Groups",
    "description" : ""
  }, {
    "name" : "Layouts",
    "description" : ""
  }, {
    "name" : "Networks",
    "description" : ""
  }, {
    "name" : "Network Views",
    "description" : ""
  }, {
    "name" : "REST Service",
    "description" : ""
  }, {
    "name" : "Session",
    "description" : ""
  }, {
    "name" : "Tables",
    "description" : ""
  }, {
    "name" : "User Interface",
    "description" : ""
  }, {
    "name" : "Visual Properties",
    "description" : ""
  }, {
    "name" : "Visual Styles",
    "description" : ""
  }, {
    "name" : "Apps: CyNDEx-2"
  }, {
    "name" : "Apps: Diffusion"
  }, {
    "name" : "Apps"
  } ],
  "schemes" : [ "http" ],
  "consumes" : [ "application/json", "application/xml" ],
  "produces" : [ "application/json", "application/xml" ],
  "paths" : {
    "/v1/apply/layouts/copycat/{sourceViewSUID}/{targetViewSUID}" : {
      "put" : {
        "tags" : [ "Layouts" ],
        "summary" : "Copy network view layout to another view",
        "description" : "Copy one network view layout onto another, setting the node location and view scale to match. This makes visually comparing networks simple.\n\n",
        "operationId" : "copyCurrentLayout",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "sourceViewSUID",
          "in" : "path",
          "description" : "Source network view SUID (or \"current\")",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "targetViewSUID",
          "in" : "path",
          "description" : "Target network view SUID (or \"current\")",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Clone the specified network view layout onto another network view",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/Copycat Layout Parameters"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Copycat Layout Response"
            }
          },
          "404" : {
            "description" : "Network View does not exist",
            "schema" : {
              "$ref" : "#/definitions/CIResponse"
            }
          }
        }
      }
    },
    "/cyndex2/v1" : {
      "get" : {
        "tags" : [ "Apps: CyNDEx-2" ],
        "summary" : "Provide basic information of the CyNDEx-2 app.",
        "description" : "App version and other basic information will be provided.",
        "operationId" : "getAppInfo",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/App Info Response"
            }
          }
        }
      }
    },
    "/cyndex2/v1/networks/current" : {
      "get" : {
        "tags" : [ "Apps: CyNDEx-2" ],
        "summary" : "Get the summary of current network and collection.",
        "description" : "Returns summary of collection contains current network.",
        "operationId" : "getCurrentNetworkSummary",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Summary Response"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Apps: CyNDEx-2" ],
        "summary" : "Save current network/collection to NDEx",
        "description" : "Save current network/collection to NDEx",
        "operationId" : "saveCurrentNetworkToNdex",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Properties required to save current network to NDEx.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NdexSaveParameters"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NDEx Base Response"
            }
          },
          "404" : {
            "description" : "Current network does not exist",
            "schema" : {
              "$ref" : "#/definitions/NDEx Base Response"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Apps: CyNDEx-2" ],
        "summary" : "Update current Cytoscape network record in NDEx",
        "description" : "Update current network's record in NDEx",
        "operationId" : "updateCurrentNetworkInNdex",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Properties required to update a network record in NDEx.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NdexSaveParameters"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NDEx Base Response"
            }
          },
          "404" : {
            "description" : "Network does not exist",
            "schema" : {
              "$ref" : "#/definitions/NDEx Base Response"
            }
          }
        }
      }
    },
    "/cyndex2/v1/networks/{suid}" : {
      "get" : {
        "tags" : [ "Apps: CyNDEx-2" ],
        "summary" : "Get the summary of specified network and collection.",
        "description" : "Returns summary of collection containing the specified network.",
        "operationId" : "getNetworkSummary",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "suid",
          "in" : "path",
          "description" : "Cytoscape Collection/Subnetwork SUID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Summary Response"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Apps: CyNDEx-2" ],
        "summary" : "Save network/collection to NDEx",
        "description" : "Save a network/collection to NDEx",
        "operationId" : "saveNetworkToNdex",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "suid",
          "in" : "path",
          "description" : "Cytoscape Collection/Subnetwork SUID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Properties required to save network to NDEx.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NdexSaveParameters"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NDEx Base Response"
            }
          },
          "404" : {
            "description" : "Network does not exist",
            "schema" : {
              "$ref" : "#/definitions/NDEx Base Response"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Apps: CyNDEx-2" ],
        "summary" : "Update an existing NDEx network entry",
        "description" : "Update an NDEx network.",
        "operationId" : "updateNetworkInNdex",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "suid",
          "in" : "path",
          "description" : "Cytoscape Collection/Subnetwork SUID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Properties required to update a network record in NDEx.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NdexSaveParameters"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NDEx Base Response"
            }
          },
          "404" : {
            "description" : "Network does not exist",
            "schema" : {
              "$ref" : "#/definitions/NDEx Base Response"
            }
          }
        }
      }
    },
    "/cyndex2/v1/networks" : {
      "post" : {
        "tags" : [ "Apps: CyNDEx-2" ],
        "summary" : "Import network from NDEx",
        "description" : "Import network(s) from NDEx.",
        "operationId" : "createNetworkFromNdex",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Properties required to import network from NDEx.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NdexImportParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NDEx Base Response"
            }
          },
          "404" : {
            "description" : "Network does not exist",
            "schema" : {
              "$ref" : "#/definitions/NDEx Base Response"
            }
          }
        }
      }
    },
    "/diffusion/v1/{networkSUID}/views/{networkViewSUID}/diffuse" : {
      "post" : {
        "tags" : [ "Apps: Diffusion" ],
        "summary" : "Execute Diffusion Analysis on a Specific Network View",
        "description" : "Diffusion will send the selected network view and its selected nodes to a web-based REST service to calculate network propagation. Results are returned and represented by columns in the node table.\n\nColumns are created for each execution of Diffusion and their names are returned in the response.\n\nThe nodes you would like to use as input should be selected. This will be used to generate the contents of the **diffusion\\_input** column, which represents the query vector and corresponds to h in the diffusion equation.\n\n",
        "operationId" : "diffuse",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkSUID",
          "in" : "path",
          "description" : "Network SUID (see GET /v1/networks)",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "networkViewSUID",
          "in" : "path",
          "description" : "Network View SUID (see GET /v1/networks/{networkId}/views)",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Diffusion App Response"
            }
          },
          "404" : {
            "description" : "Network does not exist",
            "schema" : {
              "$ref" : "#/definitions/CIResponse"
            }
          }
        }
      }
    },
    "/diffusion/v1/currentView/diffuse" : {
      "post" : {
        "tags" : [ "Apps: Diffusion" ],
        "summary" : "Execute Diffusion Analysis on Current View",
        "description" : "Diffusion will send the selected network view and its selected nodes to a web-based REST service to calculate network propagation. Results are returned and represented by columns in the node table.\n\nColumns are created for each execution of Diffusion and their names are returned in the response.\n\nThe nodes you would like to use as input should be selected. This will be used to generate the contents of the **diffusion\\_input** column, which represents the query vector and corresponds to h in the diffusion equation.\n\n",
        "operationId" : "diffuse",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Diffusion App Response"
            }
          },
          "404" : {
            "description" : "Network or Network View does not exist",
            "schema" : {
              "$ref" : "#/definitions/CIResponse"
            }
          }
        }
      }
    },
    "/diffusion/v1/{networkSUID}/views/{networkViewSUID}/diffuse_with_options" : {
      "post" : {
        "tags" : [ "Apps: Diffusion" ],
        "summary" : "Execute Diffusion Analysis on a Specific Network View with Options",
        "description" : "Diffusion will send the selected network view and its selected nodes to a web-based REST service to calculate network propagation. Results are returned and represented by columns in the node table.\n\nColumns are created for each execution of Diffusion and their names are returned in the response.\n\n",
        "operationId" : "diffuseWithOptions",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkSUID",
          "in" : "path",
          "description" : "Network SUID (see GET /v1/networks)",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "networkViewSUID",
          "in" : "path",
          "description" : "Network View SUID (see GET /v1/networks/{networkId}/views)",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Diffusion Parameters",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Diffusion Parameters"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Diffusion App Response"
            }
          },
          "404" : {
            "description" : "Network does not exist",
            "schema" : {
              "$ref" : "#/definitions/CIResponse"
            }
          }
        }
      }
    },
    "/diffusion/v1/currentView/diffuse_with_options" : {
      "post" : {
        "tags" : [ "Apps: Diffusion" ],
        "summary" : "Execute Diffusion Analysis on Current View with Options",
        "description" : "Diffusion will send the selected network view and its selected nodes to a web-based REST service to calculate network propagation. Results are returned and represented by columns in the node table.\n\nColumns are created for each execution of Diffusion and their names are returned in the response.\n\n",
        "operationId" : "diffuseWithOptions",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Diffusion Parameters",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Diffusion Parameters"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Diffusion App Response"
            }
          },
          "404" : {
            "description" : "Network or Network View does not exist",
            "schema" : {
              "$ref" : "#/definitions/CIResponse"
            }
          }
        }
      }
    },
    "/v1/commands" : {
      "get" : {
        "tags" : [ "Commands" ],
        "summary" : "List all available command namespaces",
        "description" : "Method handling HTTP GET requests to enumerate all namespaces. The returned list will be sent to the client as \"text/html\" media type.\n\nFor a list of all available commands and their documentation, see the [CyREST Command API](http://localhost:1234/v1/swaggerUI/swagger-ui/index.html?url=http%3A%2F%2Flocalhost%3A1234%2Fv1%2Fcommands%2Fswagger.json)",
        "operationId" : "enumerateNamespacesHtml",
        "produces" : [ "text/html" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          }
        }
      }
    },
    "/v1/commands/{namespace}" : {
      "get" : {
        "tags" : [ "Commands" ],
        "summary" : "List all available commands in a namespace",
        "description" : "Method to enumerate all commands for a given namespace. The returned list will be sent to the client as \"text/html\" media type.\n\nFor a list of all available commands and their documentation, see the [CyREST Command API](http://localhost:1234/v1/swaggerUI/swagger-ui/index.html?url=http%3A%2F%2Flocalhost%3A1234%2Fv1%2Fcommands%2Fswagger.json)",
        "operationId" : "enumerateHTMLCommands",
        "produces" : [ "text/html" ],
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          }
        }
      }
    },
    "/v1/commands/{namespace}/{command}" : {
      "get" : {
        "tags" : [ "Commands" ],
        "summary" : "Execute a command or list its arguments",
        "description" : "Method to enumerate all arguments for a given namespace and command or execute a namespace and command if query strings are provided.\n\nReturns a list of arguments as text/plain or the results of executing the command.\n\nFor a list of all available commands and their documentation, see the [CyREST Command API](http://localhost:1234/v1/swaggerUI/swagger-ui/index.html?url=http%3A%2F%2Flocalhost%3A1234%2Fv1%2Fcommands%2Fswagger.json)",
        "operationId" : "handleCommand",
        "produces" : [ "text/plain" ],
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "Command Namespace",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "command",
          "in" : "path",
          "description" : "Command Name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          }
        }
      }
    },
    "/v1/apply/layouts/{algorithmName}" : {
      "get" : {
        "tags" : [ "Layouts" ],
        "summary" : "Get all details of a Layout algorithm",
        "description" : "Returns all the details, including names, parameters, and compatible column types for the Layout algorithm specified by the `algorithmName` parameter.",
        "operationId" : "getLayout",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "algorithmName",
          "in" : "path",
          "description" : "Name of the Layout algorithm",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/LayoutModel"
            }
          }
        }
      }
    },
    "/v1/apply/styles/{styleName}/{networkId}" : {
      "get" : {
        "tags" : [ "Visual Styles" ],
        "summary" : "Apply Visual Style to a network",
        "description" : "Applies the Visual Style specified by the `styleName` parameter to the network specified by the `networkId` parameter.",
        "operationId" : "applyStyle",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "styleName",
          "in" : "path",
          "description" : "Name of the Visual Style",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/MessageModel"
            }
          }
        }
      }
    },
    "/v1/apply/layouts/{algorithmName}/{networkId}" : {
      "get" : {
        "tags" : [ "Layouts" ],
        "summary" : "Apply a Layout to a Network",
        "description" : "Applies the Layout specified by the `algorithmName` parameter to the Network specified by the `networkId` parameter. If the Layout is has an option to use a Column, it can be specified by the `column` parameter.",
        "operationId" : "applyLayout",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "algorithmName",
          "in" : "path",
          "description" : "Name of layout algorithm",
          "required" : true,
          "type" : "string",
          "x-example" : "circular"
        }, {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "column",
          "in" : "query",
          "description" : "Name of the Column to be used by the Layout",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/MessageModel"
            }
          }
        }
      }
    },
    "/v1/apply/layouts/{algorithmName}/parameters" : {
      "get" : {
        "tags" : [ "Layouts" ],
        "summary" : "Get Layout parameters",
        "description" : "Returns all editable parameters for the Layout algorithm specified by the `algorithmName` parameter.",
        "operationId" : "getLayoutParameters",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "algorithmName",
          "in" : "path",
          "description" : "Name of the Layout algorithm",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/LayoutParameterModel"
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Layouts" ],
        "summary" : "Update Layout parameters for a Layout algorithm",
        "description" : "Updates the Layout parameters for the Layout algorithm specified by the `algorithmName` parameter.",
        "operationId" : "updateLayoutParameters",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "algorithmName",
          "in" : "path",
          "description" : "Name of the layout algorithm",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "A list of Layout Parameters with Values.",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/LayoutParameterValueModel"
            }
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/apply/layouts/{algorithmName}/columntypes" : {
      "get" : {
        "tags" : [ "Layouts" ],
        "summary" : "Get column data types compatible a Layout algorithm",
        "description" : "Returns a list of all compatible column data types for the Layout algorithm specified by the `algorithmName` parameter.",
        "operationId" : "getCompatibleColumnDataTypes",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "algorithmName",
          "in" : "path",
          "description" : "Name of layout algorithm",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/LayoutColumnTypesModel"
            }
          }
        }
      }
    },
    "/v1/apply/styles" : {
      "get" : {
        "tags" : [ "Visual Styles" ],
        "summary" : "Get list of all Visual Style names",
        "description" : "Returns a list of all Visual Style names. Style names may not be unique.",
        "operationId" : "getStyleNames",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        }
      }
    },
    "/v1/apply/edgebundling/{networkId}" : {
      "get" : {
        "tags" : [ "Layouts" ],
        "summary" : "Apply Edge Bundling to a network",
        "description" : "Apply edge bundling to the Network specified by the `networkId` parameter. Edge bundling is executed with default parameters; at present, optional parameters are not supported.",
        "operationId" : "bundleEdge",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/MessageModel"
            }
          }
        }
      }
    },
    "/v1/apply/layouts" : {
      "get" : {
        "tags" : [ "Layouts" ],
        "summary" : "Get all available Layout names",
        "description" : "Returns all available layouts as a list of layout names.\n\n<h3>Important Note</h3>\n\nThis <strong>does not include yFiles layout algorithms</strong>, due to license issues.",
        "operationId" : "layoutList",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        }
      }
    },
    "/v1/apply/fit/{networkId}" : {
      "get" : {
        "tags" : [ "Network Views" ],
        "summary" : "Fit network to the window",
        "description" : "Fit the first available Network View for the Network specified by the `networkId` parameter to the current window.",
        "operationId" : "fitContent",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/MessageModel"
            }
          }
        }
      }
    },
    "/v1/apps" : {
      "get" : {
        "tags" : [ "Apps" ],
        "summary" : "Get installed Automation Accessible Cytoscape Apps",
        "description" : "Returns installed Cytoscape Apps that have CyREST accessible Functions or Commands, as a list of App names.",
        "operationId" : "getAppList",
        "produces" : [ "application/json;charset=utf-8" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/AppModel"
              }
            }
          }
        }
      }
    },
    "/v1/collections" : {
      "get" : {
        "tags" : [ "Collections" ],
        "summary" : "Get one or all root networks.",
        "description" : "Returns all Root Networks as an array of SUIDs.\n\nIf a valid Sub-Network SUID is specified in the `subsuid` parameter, the list will contain only the SUID of that Sub-Network's Root Network.",
        "operationId" : "getCollectionsAsSUID",
        "produces" : [ "application/json; charset=UTF-8" ],
        "parameters" : [ {
          "name" : "subsuid",
          "in" : "query",
          "description" : "Sub-Network SUID. If this parameter is used, the Root Network of this Sub-Network will be returned.\n\nCytoscape can contain multiple Root Networks, each with their own Sub-Networks\n```\n── Root Network 1\n   ├── Sub-Network A\n   └── Sub-Network B\n── Root Network 2\n   └── Sub-Network C\n```",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "integer",
                "format" : "int64"
              }
            }
          }
        }
      }
    },
    "/v1/collections/{networkId}.cx" : {
      "get" : {
        "tags" : [ "Collections" ],
        "summary" : "Get a collection as CX",
        "description" : "Returns a Root Network or Sub-Network in [CX format](http://manual.cytoscape.org/en/stable/Supported_Network_File_Formats.html#cytoscape-cx).\n\nIf the `networkId` parameter is a Root Network, this returns that Root Network.\n\nIf the `networkId` parameter is a Sub-Network, this returns the Root Retwork that contains that Sub-Network.",
        "operationId" : "getCollectionAsCx",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "Root Network or Sub-Network SUID. \n\nCytoscape can contain multiple Root Networks, each with their own Sub-Networks\n```\n── Root Network 1\n   ├── Sub-Network A\n   └── Sub-Network B\n── Root Network 2\n   └── Sub-Network C\n```",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/collections/{networkId}/subnetworks" : {
      "get" : {
        "tags" : [ "Collections" ],
        "summary" : "Get SubNetworks",
        "description" : "Returns a list of SUIDs representing Sub-Networks that belong to the Root Network specified by the `networkId` parameter.",
        "operationId" : "getSubnetworks",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "Root Network SUID\n\nCytoscape can contain multiple Root Networks, each with their own Sub-Networks\n```\n── Root Network 1\n   ├── Sub-Network A\n   └── Sub-Network B\n── Root Network 2\n   └── Sub-Network C\n```",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "integer",
                "format" : "int64"
              }
            }
          }
        }
      }
    },
    "/v1/collections/{networkId}/tables" : {
      "get" : {
        "tags" : [ "Collections" ],
        "summary" : "Get Tables in a Root Network",
        "description" : "Returns a collection of tables belonging to the Root Network specified by the `networkId` parameter. ",
        "operationId" : "getRootTables",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "Root Network SUID\n\nCytoscape can contain multiple Root Networks, each with their own Sub-Networks\n```\n── Root Network 1\n   ├── Sub-Network A\n   └── Sub-Network B\n── Root Network 2\n   └── Sub-Network C\n```",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Cytoscape Table with Rows"
              }
            }
          }
        }
      }
    },
    "/v1/collections/{networkId}/tables/{tableType}" : {
      "get" : {
        "tags" : [ "Collections" ],
        "summary" : "Get a specific Table in a Root Network",
        "description" : "Returns either the `default` or `shared` table from the Root Network specified by the `networkId` parameter.\n\nRoot network tables, particularly the shared table accessible by specifying the `tableType` parameter as `shared`, are available through Collection operations, and are not normally accessible in other contexts.",
        "operationId" : "getRootTable",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "Root Network SUID\n\nCytoscape can contain multiple Root Networks, each with their own Sub-Networks\n```\n── Root Network 1\n   ├── Sub-Network A\n   └── Sub-Network B\n── Root Network 2\n   └── Sub-Network C\n```",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "tableType",
          "in" : "path",
          "description" : "The `default` table contains data relevant to a Root Network. The `shared` table contains data shared by all Sub-Networks of a Root Network.",
          "required" : true,
          "type" : "string",
          "enum" : [ "default", "shared" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Cytoscape Table with Rows"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Collections" ],
        "summary" : "Update table values",
        "description" : "Updates the values in a table. New columns will be created if they do not exist in the target table.\n\nRoot network tables, particularly the shared table accessible by specifying the `tableType` parameter as `shared`, are available through Collection operations, and are not normally accessible in other contexts.",
        "operationId" : "updateTable",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "Root Network SUID\n\nCytoscape can contain multiple Root Networks, each with their own Sub-Networks\n```\n── Root Network 1\n   ├── Sub-Network A\n   └── Sub-Network B\n── Root Network 2\n   └── Sub-Network C\n```",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "tableType",
          "in" : "path",
          "description" : "The `default` table contains data relevant to a Root Network. The `shared` table contains data shared by all Sub-Networks of a Root Network.",
          "required" : true,
          "type" : "string",
          "enum" : [ "default", "shared" ]
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The data with which to update the table.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Table Update Data"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/collections/count" : {
      "get" : {
        "tags" : [ "Collections" ],
        "summary" : "Get a count of all root networks.",
        "description" : "Returns a count of all root networks.",
        "operationId" : "getCollectionCount",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CountModel"
            }
          }
        }
      }
    },
    "/v1/collections/{networkId}/tables/{tableType}/columns" : {
      "get" : {
        "tags" : [ "Collections" ],
        "summary" : "Get a list of columns for a Root Network table",
        "description" : "Return a list of the columns in the table specified by the `tableType` parameter in the Root Network specified by the `networkId` parameter.\n\nRoot network tables, particularly the shared table accessible by specifying the `tableType` parameter as `shared`, are available through Collection operations, and are not normally accessible in other contexts.",
        "operationId" : "getColumns",
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "Root Network SUID\n\nCytoscape can contain multiple Root Networks, each with their own Sub-Networks\n```\n── Root Network 1\n   ├── Sub-Network A\n   └── Sub-Network B\n── Root Network 2\n   └── Sub-Network C\n```",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "tableType",
          "in" : "path",
          "description" : "The `default` table contains data relevant to a Root Network. The `shared` table contains data shared by all Sub-Networks of a Root Network.",
          "required" : true,
          "type" : "string",
          "enum" : [ "default", "shared" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Cytoscape Column"
              }
            }
          }
        }
      }
    },
    "/v1/collections/{networkId}/tables/{tableType}/columns/{columnName}" : {
      "delete" : {
        "tags" : [ "Collections" ],
        "summary" : "Delete a column",
        "description" : "Deletes the column specified by the `columnName` parameter from the table specified the `tableType` parameter in the Root Network specified by the `networkId` parameter.\n\nRoot network tables, particularly the shared table accessible by specifying the `tableType` parameter as `shared`, are available through Collection operations, and are not normally accessible in other contexts.",
        "operationId" : "deleteColumn",
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "Root Network SUID\n\nCytoscape can contain multiple Root Networks, each with their own Sub-Networks\n```\n── Root Network 1\n   ├── Sub-Network A\n   └── Sub-Network B\n── Root Network 2\n   └── Sub-Network C\n```",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "tableType",
          "in" : "path",
          "description" : "The `default` table contains data relevant to a Root Network. The `shared` table contains data shared by all Sub-Networks of a Root Network.",
          "required" : true,
          "type" : "string",
          "enum" : [ "default", "shared" ]
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column Name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/tables/count" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "Get number of global tables",
        "description" : "Returns the number of global tables.",
        "operationId" : "getTableCount",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CountModel"
            }
          }
        }
      }
    },
    "/v1/networks/{networkId}/groups" : {
      "get" : {
        "tags" : [ "Groups" ],
        "summary" : "Get all groups in the network",
        "description" : "Returns a list of all the groups in the network specified by the `networkId` parameter.",
        "operationId" : "getAllGroups",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "Network SUID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/A Group of Cytoscape Nodes and Edges"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Groups" ],
        "summary" : "Create a new group",
        "description" : "Create a new group in the network specified by the parameter `networkId`. The contents are specified the message body.",
        "operationId" : "createGroup",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "New Group name and contents",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NewGroupParameterModel"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GroupSUIDModel"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Groups" ],
        "summary" : "Delete all groups in the network",
        "description" : "Deletes all groups in the network specified by `networkId` parameter. The nodes and edges that the groups contained will remain present in the network, however the nodes used to identify the Groups will be deleted.",
        "operationId" : "deleteAllGroups",
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/networks/{networkId}/groups/count" : {
      "get" : {
        "tags" : [ "Groups" ],
        "summary" : "Get number of groups in the network",
        "description" : "Returns the number of groups in the network",
        "operationId" : "getGroupCount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "Network SUID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CountModel"
            }
          }
        }
      }
    },
    "/v1/networks/{networkId}/groups/{groupNodeId}/expand" : {
      "get" : {
        "tags" : [ "Groups" ],
        "summary" : "Expand group",
        "description" : "Expands the group specified by the `groupNodeId` and `networkId` parameters.",
        "operationId" : "expandGroup",
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "groupNodeId",
          "in" : "path",
          "description" : "SUID of the Node representing the Group",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "204" : {
            "description" : "Group expanded"
          },
          "500" : {
            "description" : "Failed to expand group"
          }
        }
      }
    },
    "/v1/networks/{networkId}/groups/{groupNodeId}/collapse" : {
      "get" : {
        "tags" : [ "Groups" ],
        "summary" : "Collapse group",
        "description" : "Collapses the group specified by the `groupNodeId` and `networkId` parameters.",
        "operationId" : "collapseGroup",
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "groupNodeId",
          "in" : "path",
          "description" : "SUID of the Node representing the Group",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "204" : {
            "description" : "Group collapsed"
          },
          "500" : {
            "description" : "Failed to collapse group"
          }
        }
      }
    },
    "/v1/networks/{networkId}/groups/{groupNodeId}" : {
      "get" : {
        "tags" : [ "Groups" ],
        "summary" : "Get a group by SUID",
        "description" : "Returns the group specified by the `groupNodeId` and `networkId` parameters.",
        "operationId" : "getGroup",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "groupNodeId",
          "in" : "path",
          "description" : "SUID of the Node representing the Group",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/A Group of Cytoscape Nodes and Edges"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Groups" ],
        "summary" : "Delete a group",
        "description" : "Deletes the group specified by the `groupNodeId` and `networkId` parameters. The nodes and edges that the group contained will remain present in the network, however the node used to identify the Group will be deleted.",
        "operationId" : "deleteGroup",
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "groupNodeId",
          "in" : "path",
          "description" : "SUID of the Node representing the Group",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/gc" : {
      "get" : {
        "tags" : [ "REST Service", "Cytoscape System" ],
        "summary" : "Run Java garbage collection",
        "description" : "Manually call Java's System.gc() to free up unused memory. This process happens automatically, but may be useful to call explicitly for testing or evaluation purposes.",
        "operationId" : "runGarbageCollection",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "204" : {
            "description" : "Successful Garbage Collection"
          }
        }
      }
    },
    "/v1/version" : {
      "get" : {
        "tags" : [ "REST Service", "Cytoscape System" ],
        "summary" : "Get Cytoscape and REST API version",
        "description" : "Returns the version of the current Cytoscape REST API.",
        "operationId" : "getCytoscapeVersion",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Cytoscape and CyREST API Versions"
            }
          }
        }
      }
    },
    "/v1" : {
      "get" : {
        "tags" : [ "REST Service", "Cytoscape System" ],
        "summary" : "Cytoscape RESTful API server status",
        "description" : "Returns the status of the server if operational, including version information and available memory and processor resources.",
        "operationId" : "getStatus",
        "produces" : [ "application/json;charset=utf-8" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Server Status",
            "schema" : {
              "$ref" : "#/definitions/ServerStatusModel"
            }
          },
          "500" : {
            "description" : "CyREST service is unavailable"
          }
        }
      }
    },
    "/v1/networks.json" : {
      "get" : {
        "tags" : [ "Networks" ],
        "summary" : " Get networks in Cytoscape.js JSON format",
        "description" : "Returns a list of all networks as an array of [Cytoscape.js](http://manual.cytoscape.org/en/stable/Supported_Network_File_Formats.html#cytoscape-js-json) format entries.\n\nIf the `column` and `query` parameters are specified, the results will be limited to rows in the network table where the value in the column specified by the `column` parameter matches the value specified by the `query` parameter.",
        "operationId" : "getNetworks",
        "produces" : [ "application/json; charset=UTF-8" ],
        "parameters" : [ {
          "name" : "column",
          "in" : "query",
          "description" : "The name of the column that will be queried for matches.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "The value to be matched.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          }
        }
      }
    },
    "/v1/networks.names" : {
      "get" : {
        "tags" : [ "Networks" ],
        "summary" : "Returns a list of network names with corresponding SUIDs",
        "description" : "Returns a list of all networks as names and their corresponding SUIDs.\n\nIf the `column` and `query` parameters are specified, the results will be limited to rows in the network table where the value in the column specified by the `column` parameter matches the value specified by the `query` parameter.",
        "operationId" : "getNetworksNames",
        "produces" : [ "application/json; charset=UTF-8" ],
        "parameters" : [ {
          "name" : "column",
          "in" : "query",
          "description" : "The name of the column that will be queried for matches.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "The value to be matched.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/SUIDNameModel"
              }
            }
          }
        }
      }
    },
    "/v1/networks/{networkId}/nodes" : {
      "get" : {
        "tags" : [ "Networks" ],
        "summary" : "Get nodes",
        "description" : "Returns a list of all nodes in the network specified by the `networkId` parameter as SUIDs.\n\nIf the `column` and `query` parameters are specified, the results will be limited to rows in the node table where the value in the column specified by the `column` parameter matches the value specified by the `query` parameter.",
        "operationId" : "getNodes",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the network containing the nodes",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "column",
          "in" : "query",
          "description" : "The name of the column that will be queried for matches.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "The value to be matched.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "integer",
                "format" : "int64"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Networks" ],
        "summary" : "Add node(s) to a network",
        "description" : "Adds new nodes to the network specified by the `networkId` parameter. The `name` column will be populated by the contents of the message body.",
        "operationId" : "createNode",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the network containing the node.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Array of new node names",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/SUIDNameModel"
              }
            }
          },
          "412" : {
            "description" : ""
          }
        }
      },
      "delete" : {
        "tags" : [ "Networks" ],
        "summary" : "Delete all nodes in a network",
        "description" : "Delete all the nodes from the network specified by the `networkId` parameter.",
        "operationId" : "deleteAllNodes",
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the network to delete nodes from",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/networks" : {
      "get" : {
        "tags" : [ "Networks" ],
        "summary" : "Get SUID list of networks",
        "description" : "Returns a list of all networks as SUIDs.\n\nIf the `column` and `query` parameters are specified, the results will be limited to rows in the network table where the value in the column specified by the `column` parameter matches the value specified by the `query` parameter.",
        "operationId" : "getNetworksAsSUID",
        "produces" : [ "application/json; charset=UTF-8" ],
        "parameters" : [ {
          "name" : "column",
          "in" : "query",
          "description" : "The name of the column that will be queried for matches.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "The value to be matched.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "integer",
                "format" : "int64"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Networks" ],
        "summary" : "Create a new network from a file or URL",
        "description" : "Creates a new network in the current session from a file or URL source.\n\nDepending on the setting of the `format` parameter the source can be in one of several formats:\n\n| Format   | Details    |\n| -------- | -------    |\n| edgeList | [SIF](http://manual.cytoscape.org/en/stable/Supported_Network_File_Formats.html#sif-format) format |\n| cx       | [CX](http://manual.cytoscape.org/en/stable/Supported_Network_File_Formats.html#cytoscape-cx) format |\n| json     | [Cytoscape.js](http://manual.cytoscape.org/en/stable/Supported_Network_File_Formats.html#cytoscape-js-json) format |\nIf the `source` parameter is left unspecified, the message body should contain data in the format specified by the `format` parameter.\n\n\nIf the `source` parameter is specified as \"url\", the message body should be a list of URLs, formatted as below:\n\n```\n[\n  {\n    \"source_location\": \"http://somewhere.com/graph.js\",\n\t   \"source_method\": \"GET\",\n\t   \"ndex_uuid\": \"12345\"\n  }\n  ...\n]\n```\nThe `source_location` field specifies the URL from which to get data, and the `source_method` field specifies the HTTP method to use. All entries should be in the format specified by the `format` parameter. All the fields in each entry will be copied to columns in the default network table row for the new network.",
        "operationId" : "createNetwork",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "collection",
          "in" : "query",
          "description" : "The name of the network collection to add new networks to. If the collection does not exist, it will be created.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "source",
          "in" : "query",
          "description" : "Set this to `url` to treat the message body as a list of urls.",
          "required" : false,
          "type" : "string",
          "enum" : [ "url" ]
        }, {
          "name" : "format",
          "in" : "query",
          "description" : "The format of the source data.",
          "required" : false,
          "type" : "string",
          "enum" : [ "edgelist", "json", "cx" ]
        }, {
          "name" : "title",
          "in" : "query",
          "description" : "Name of the new network. This is only used if the network name cannot be set directly in source data.",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Source data. This is either the data to be loaded, or a list of URLs from which to load data.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/InputStream"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NetworkSUIDModel"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Networks" ],
        "summary" : "Delete all networks in current session",
        "description" : "Delete all networks in the current session.",
        "operationId" : "deleteAllNetworks",
        "parameters" : [ ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/networks/{networkId}" : {
      "get" : {
        "tags" : [ "Networks" ],
        "summary" : "Get a network in Cytoscape.js format",
        "description" : "Returns the Network specified by the `networkId` parameter with all associated tables in [Cytoscape.js](http://manual.cytoscape.org/en/stable/Supported_Network_File_Formats.html#cytoscape-js-json) format",
        "operationId" : "getNetwork",
        "produces" : [ "application/json;charset=utf-8" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Networks" ],
        "summary" : "Create a subnetwork from selected nodes and edges",
        "description" : "Creates new sub-network from current selection, with the name specified by the `title` parameter.\n\nReturns the SUID of the new sub-network.",
        "operationId" : "createNetworkFromSelected",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the network containing the selected nodes and edges",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "title",
          "in" : "query",
          "description" : "Name for the new sub-network",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NetworkSUIDModel"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Networks" ],
        "summary" : "Delete a network",
        "description" : "Deletes the network specified by the `networkId` parameter.",
        "operationId" : "deleteNetwork",
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the network to delete",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/networks/{networkId}/edges" : {
      "get" : {
        "tags" : [ "Networks" ],
        "summary" : "Get edges",
        "description" : "Returns a list of all edges in the network specified by the `networkId` parameter as SUIDs.\n\nIf the `column` and `query` parameters are specified, the results will be limited to rows in the edge table where the value in the column specified by the `column` parameter matches the value specified by the `query` parameter.",
        "operationId" : "getEdges",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the network containing the edges",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "column",
          "in" : "query",
          "description" : "The name of the column that will be queried for matches.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "The value to be matched.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "integer",
                "format" : "int64"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Networks" ],
        "summary" : "Add edge(s) to existing network",
        "description" : "Add new edge(s) to the network.  Body should include an array of new node names.\n\nReturns and array of objects with fields itentifying the SUIDs of the new edges along with source and target SUIDs.",
        "operationId" : "createEdge",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the network to add edges to.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Array of new edges",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/New Edge Parameter"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Created Edge"
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Networks" ],
        "summary" : "Delete all edges in a network",
        "description" : "Delete all the edges from the network specified by the `networkId` parameter.",
        "operationId" : "deleteAllEdges",
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the network to delete edges from",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/networks/{networkId}/nodes/{nodeId}" : {
      "get" : {
        "tags" : [ "Networks" ],
        "summary" : "Get a node",
        "description" : "Returns a node with its associated row data.",
        "operationId" : "getNode",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the network containing the node",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "nodeId",
          "in" : "path",
          "description" : "SUID of the node",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Node Data"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Networks" ],
        "summary" : "Delete a node in the network",
        "description" : "Deletes the node specified by the `nodeId` and `networkId` parameters.",
        "operationId" : "deleteNode",
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the network containing the node.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "nodeId",
          "in" : "path",
          "description" : "SUID of the node",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/networks/{networkId}/edges/{edgeId}" : {
      "get" : {
        "tags" : [ "Networks" ],
        "summary" : "Get an edge",
        "description" : "Returns an edge with its associated row data.",
        "operationId" : "getEdge",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the network containing the edge",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "edgeId",
          "in" : "path",
          "description" : "SUID of the edge",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Edge Data"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Networks" ],
        "summary" : "Delete an edge in the network.",
        "description" : "Deletes the edge specified by the `edgeId` and `networkId` parameters.",
        "operationId" : "deleteEdge",
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the network containing the edge.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "edgeId",
          "in" : "path",
          "description" : "SUID of the edge",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/networks/{networkId}/nodes/selected/neighbors" : {
      "get" : {
        "tags" : [ "Networks" ],
        "summary" : "Get all neighbors of the selected nodes",
        "description" : "Returns the neighbors of the nodes currently selected in the network specified by the `networkId` parameter as a list of SUIDs.\n\nNote that this does not include the nodes in the original selection.",
        "operationId" : "getNeighborsSelected",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "integer",
                "format" : "int64"
              }
            }
          }
        }
      }
    },
    "/v1/networks/{networkId}/edges/{edgeId}/{type}" : {
      "get" : {
        "tags" : [ "Networks" ],
        "summary" : "Get source/target node of an edge",
        "description" : "Returns the SUID of the source or target node of the edge specified by the `edgeId` and `networkId` parameters.\n\nReturn values can be in one of two formats, depending on the value specified in the `type` parameter:\n\n```\n{\n   \"source\": 101\n}\n```\n\n```\n{\n   \"target\": 102\n}\n```\n\n",
        "operationId" : "getEdgeComponent",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the network containing the edge",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "edgeId",
          "in" : "path",
          "description" : "SUID of the edge",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "type",
          "in" : "path",
          "description" : "The node type to return",
          "required" : true,
          "type" : "string",
          "enum" : [ "source", "target" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/v1/networks/{networkId}/edges/{edgeId}/isDirected" : {
      "get" : {
        "tags" : [ "Networks" ],
        "summary" : "Get edge directionality",
        "description" : "Returns true if the edge specified by the `edgeId` and `networkId` parameters is directed.",
        "operationId" : "getEdgeDirected",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the network containing the edge",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "edgeId",
          "in" : "path",
          "description" : "SUID of the edge",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "boolean"
            }
          }
        }
      }
    },
    "/v1/networks/{networkId}/nodes/{nodeId}/adjEdges" : {
      "get" : {
        "tags" : [ "Networks" ],
        "summary" : "Get adjacent edges for a node",
        "description" : "Returns a list of connected edges as SUIDs for the node specified by the `nodeId` and `networkId` parameters.",
        "operationId" : "getAdjEdges",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the network containing the node",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "nodeId",
          "in" : "path",
          "description" : "SUID of the node",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "integer",
                "format" : "int64"
              }
            }
          }
        }
      }
    },
    "/v1/networks/{networkId}/nodes/{nodeId}/neighbors" : {
      "get" : {
        "tags" : [ "Networks" ],
        "summary" : "Get neighbors of the node",
        "description" : "Returns the neighbors of the node specified by the `nodeId` and `networkId` parameters as a list of SUIDs.",
        "operationId" : "getNeighbours",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the network containing the node.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "nodeId",
          "in" : "path",
          "description" : "SUID of the node",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "integer",
                "format" : "int64"
              }
            }
          }
        }
      }
    },
    "/v1/networks/count" : {
      "get" : {
        "tags" : [ "Networks" ],
        "summary" : "Get number of networks in current session",
        "description" : "Returns the number of networks in current Cytoscape session.",
        "operationId" : "getNetworkCount",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CountModel"
            }
          }
        }
      }
    },
    "/v1/networks/views/currentNetworkView" : {
      "get" : {
        "tags" : [ "Network Views" ],
        "summary" : "Get the current Network View",
        "description" : "Returns the current Network View.",
        "operationId" : "getCurrentNetworkView",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NetworkViewSUIDResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Network Views" ],
        "summary" : "Set the current Network View",
        "description" : "Sets the current Network View.",
        "operationId" : "setCurrentNetworkView",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "SUID of the Network View",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/NetworkViewSUIDModel"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CIResponse"
            }
          }
        }
      }
    },
    "/v1/networks/currentNetwork" : {
      "get" : {
        "tags" : [ "Networks" ],
        "summary" : "Get the current network",
        "description" : "Returns the current network.",
        "operationId" : "getCurrentNetwork",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NetworkSUIDResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Networks" ],
        "summary" : "Set the current network",
        "description" : "Sets the current network.",
        "operationId" : "setCurrentNetwork",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "SUID of the Network",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/NetworkSUIDModel"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CIResponse"
            }
          }
        }
      }
    },
    "/v1/networks/{networkId}/nodes/count" : {
      "get" : {
        "tags" : [ "Networks" ],
        "summary" : "Get number of nodes in the network",
        "description" : "Returns the number of nodes in the network specified by the `networkId` parameter.",
        "operationId" : "getNodeCount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the network containing the nodes",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CountModel"
            }
          }
        }
      }
    },
    "/v1/networks/{networkId}/edges/count" : {
      "get" : {
        "tags" : [ "Networks" ],
        "summary" : "Get number of edges in the network",
        "description" : "Returns the number of edges in the network specified by the `networkId` parameter.",
        "operationId" : "getEdgeCount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the network containing the edges",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CountModel"
            }
          }
        }
      }
    },
    "/v1/networks/{networkId}/nodes/{nodeId}/pointer" : {
      "get" : {
        "tags" : [ "Networks" ],
        "summary" : "Get network pointer (nested network SUID)",
        "description" : "If the node specified by the `nodeId` and `networkId` parameters has an associated nested network, returns the SUID of the nested network.",
        "operationId" : "getNetworkPointer",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the network containing the node",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "nodeId",
          "in" : "path",
          "description" : "SUID of the node",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NetworkSUIDModel"
            }
          }
        }
      }
    },
    "/v1/networks/{networkId}/nodes/selected" : {
      "get" : {
        "tags" : [ "Networks" ],
        "summary" : "Get selected nodes",
        "description" : "Gets the selected nodes in the network specified by the `networkId` parameter. The results are presented as a list of SUIDs.",
        "operationId" : "getSelectedNodes",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the network containing the nodes",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "integer",
                "format" : "int64"
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Networks" ],
        "summary" : "Set selected nodes",
        "description" : "Sets as selected the nodes specified by the `suids` and `networkId` parameters.\n\nReturns a list of selected SUIDs.",
        "operationId" : "setSelectedNodes",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the network containing the nodes",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Array of node SUIDs to select",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "number",
              "format" : "double"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "integer",
                "format" : "int64"
              }
            }
          }
        }
      }
    },
    "/v1/networks/{networkId}/edges/selected" : {
      "get" : {
        "tags" : [ "Networks" ],
        "summary" : "Get selected edges",
        "description" : "Gets the selected edges in the network specified by the `networkId` parameter. The results are presented as a list of SUIDs.",
        "operationId" : "getSelectedEdges",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the network containing the edges",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "integer",
                "format" : "int64"
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Networks" ],
        "summary" : "Set selected edges",
        "description" : "Sets as selected the edges specified by the `suids` and `networkId` parameters.\n\nReturns a list of selected SUIDs.",
        "operationId" : "setSelectedEdges",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the network containing the edges",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Array of edge SUIDs to select",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "number",
              "format" : "double"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "integer",
                "format" : "int64"
              }
            }
          }
        }
      }
    },
    "/v1/networks/{networkId}/views/{viewId}/{objectType}/{objectId}" : {
      "get" : {
        "tags" : [ "Network Views" ],
        "summary" : "Get the Visual Properties for a Node or Edge Object",
        "description" : "Gets a list of Visual Properties for the Object specified by the `objectId` and `objectType` parameters in the Network View specified by the `viewId` and `networkId` parameters.\n\nAdditional details on common Visual Properties can be found in the [Basic Visual Lexicon JavaDoc API](http://chianti.ucsd.edu/cytoscape-3.6.1/API/org/cytoscape/view/presentation/property/BasicVisualLexicon.html)\n\n",
        "operationId" : "getView",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "viewId",
          "in" : "path",
          "description" : "SUID of the Network View",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "objectType",
          "in" : "path",
          "description" : "Type of Object",
          "required" : true,
          "type" : "string",
          "enum" : [ "nodes", "edges" ]
        }, {
          "name" : "objectId",
          "in" : "path",
          "description" : "SUID of the Object",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Visual Property Value"
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Network Views" ],
        "summary" : "Update the Visual Properties of an Object",
        "description" : "Updates the Visual Properties in the object specified by the `objectId` and `objectType` parameters in the Network View specified by the `viewId` and `networkId` parameters.\n\nExamples of Visual Properties:\n\n```\n{\n  \"visualProperty\": \"NODE_BORDER_WIDTH\",\n  \"value\": 2\n}\n```\n\n```\n{\n  \"visualProperty\": \"EDGE_TRANSPARENCY\",\n  \"value\": 170\n}```\n\n```\n{\n  \"visualProperty\": \"NETWORK_BACKGROUND_PAINT\",\n  \"value\": \"#000000\"\n}```\n\n\nAdditional details on common Visual Properties can be found in the [Basic Visual Lexicon JavaDoc API](http://chianti.ucsd.edu/cytoscape-3.6.1/API/org/cytoscape/view/presentation/property/BasicVisualLexicon.html)\n\nNote that this sets the Visual Properties temporarily unless the `bypass` parameter is set to `true`. If the `bypass` parameter is set to `true`, the Visual Style will be overridden by these Visual Property values. If the `bypass` parameter is not used or is set to `false`, any Visual Properties set will return to those defined in the Visual Style if the Network View is updated.\n",
        "operationId" : "updateView",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "viewId",
          "in" : "path",
          "description" : "SUID of the Network View",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "objectType",
          "in" : "path",
          "description" : "Type of Object",
          "required" : true,
          "type" : "string",
          "enum" : [ "nodes", "edges", "network" ]
        }, {
          "name" : "objectId",
          "in" : "path",
          "description" : "SUID of the Object",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "bypass",
          "in" : "query",
          "description" : "Bypass the Visual Style with these Visual Properties",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "A list of Visual Properties and their values.",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Visual Property Value"
            }
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/networks/{networkId}/views" : {
      "get" : {
        "tags" : [ "Network Views" ],
        "summary" : "Get all Network Views",
        "description" : "Returns an array of all network views belonging to the network specified by the `networkId` paramter. The response is a list of Network SUIDs.",
        "operationId" : "getAllNetworkViews",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "An array of Network View SUIDs",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "integer",
                "format" : "int64"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Network Views" ],
        "summary" : "Create a new Network View",
        "description" : "Creates a new Network View for the Network specified by the `networkId` parameter.",
        "operationId" : "createNetworkView",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "201" : {
            "description" : "Network View SUID",
            "schema" : {
              "$ref" : "#/definitions/NetworkViewSUIDModel"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Network Views" ],
        "summary" : "Delete all Network Views",
        "description" : "Deletes all Network Views available in the Network specified by the `networkId` parameter. Cytoscape can have multiple views per network model, but this feature is not exposed in the Cytoscape GUI. GUI access is limited to the first available view only.\n\n",
        "operationId" : "deleteAllNetworkViews",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/networks/{networkId}/views/{viewId}/{objectType}" : {
      "get" : {
        "tags" : [ "Network Views" ],
        "summary" : "Get all set values for a specific Visual Property",
        "description" : "Returns a list of all Visual Property values for the Visual Property specified by the `visualProperty` and `objectType` parameters, in the Network View specified by the `viewId` and `networkId` parameters.\n\nAdditional details on common Visual Properties can be found in the [Basic Visual Lexicon JavaDoc API](http://chianti.ucsd.edu/cytoscape-3.6.1/API/org/cytoscape/view/presentation/property/BasicVisualLexicon.html)",
        "operationId" : "getViews",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "viewId",
          "in" : "path",
          "description" : "SUID of the Network View",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "objectType",
          "in" : "path",
          "description" : "Type of Object",
          "required" : true,
          "type" : "string",
          "enum" : [ "nodes", "edges", "network" ]
        }, {
          "name" : "visualProperty",
          "in" : "query",
          "description" : "Name of the Visual Property",
          "required" : false,
          "type" : "string",
          "x-example" : "NODE_SHAPE"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ObjectVisualPropertyValueModel"
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Network Views" ],
        "summary" : "Update multiple node/edge Visual Properties at once",
        "description" : "Updates multiple node or edge Visual Properties as defined by the `objectType` parameter, in the Network View specified by the `viewId` and `networkId` parameters.\n\nExamples of Visual Properties:\n\n```\n{\n  \"visualProperty\": \"NODE_BORDER_WIDTH\",\n  \"value\": 2\n}\n```\n```\n{\n  \"visualProperty\": \"NODE_BORDER_PAINT\",\n  \"value\": \"#CCCCCC\"\n}\n```\n\n```\n{\n  \"visualProperty\": \"EDGE_TRANSPARENCY\",\n  \"value\": 170\n}```\n```\n{\n  \"visualProperty\": \"EDGE_PAINT\",\n  \"value\": \"#808080\"\n }```\n\n\nAdditional details on common Visual Properties can be found in the [Basic Visual Lexicon JavaDoc API](http://chianti.ucsd.edu/cytoscape-3.6.1/API/org/cytoscape/view/presentation/property/BasicVisualLexicon.html)\n\nNote that this sets the Visual Properties temporarily unless the `bypass` parameter is set to `true`. If the `bypass` parameter is set to `true`, the Visual Style will be overridden by these Visual Property values. If the `bypass` parameter is not used or is set to `false`, any Visual Properties set will return to those defined in the Visual Style if the Network View is updated.\n",
        "operationId" : "updateViews",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "viewId",
          "in" : "path",
          "description" : "SUID of the Network View",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "objectType",
          "in" : "path",
          "description" : "Type of Object",
          "required" : true,
          "type" : "string",
          "enum" : [ "nodes", "edges" ]
        }, {
          "name" : "bypass",
          "in" : "query",
          "description" : "Bypass the Visual Style with these Visual Properties",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "A list of Objects with Visual Properties.",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ObjectVisualPropertyValueModel"
            }
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/networks/{networkId}/views/count" : {
      "get" : {
        "tags" : [ "Network Views" ],
        "summary" : "Get number of views for the given network model",
        "description" : "Returns a count of the Network Views available for the Network specified by the `networkId` parameter.\n\nCytoscape can have multiple views per network model, but this feature is not exposed in the Cytoscape GUI. GUI access is limited to the first available view only.",
        "operationId" : "getNetworkViewCount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CountModel"
            }
          }
        }
      }
    },
    "/v1/networks/{networkId}/views/first" : {
      "get" : {
        "tags" : [ "Network Views" ],
        "summary" : "Get the first Network View (as JSON or a file)",
        "description" : "This returns the first view of the network. Cytoscape can have multiple views per network model, but this feature is not exposed in the Cytoscape GUI. GUI access is limited to the first available view only.\n\nIf the `file` parameter is left unspecified, the response will contain data in [Cytoscape.js](http://manual.cytoscape.org/en/stable/Supported_Network_File_Formats.html#cytoscape-js-json) format.\n\nIf the `file` parameter is specified, the Network View will be written to a file, and the response will contain the location of the file in the following format:\n\n```\n\n{\n  \"file\": \"/media/HD1/myFiles/networkView.sif\"\n}\n```\n\nThe format of the output file is defined by the extension of the `file` parameter.",
        "operationId" : "getFirstNetworkView",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "file",
          "in" : "query",
          "description" : "A path to a file relative to the current directory. The format of the file written is defined by the file extension.\n\n| Extension   | Details    |\n| ----------- | -----------|\n| .cys        | Cytoscape Style format |\n| .xml/.xgmml | [XGMML](http://manual.cytoscape.org/en/stable/Supported_Network_File_Formats.html?highlight=xgmml#xgmml-format) format |\n| .nnf        | [NNF](http://manual.cytoscape.org/en/stable/Supported_Network_File_Formats.html#nnf) format |\n| .sif        | [SIF](http://manual.cytoscape.org/en/stable/Supported_Network_File_Formats.html#sif-format) format |\n| .cyjs       | [Cytoscape.js](http://manual.cytoscape.org/en/stable/Supported_Network_File_Formats.html#cytoscape-js-json) format |\n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      },
      "delete" : {
        "tags" : [ "Network Views" ],
        "summary" : "Delete the first available view",
        "description" : "Deletes the first available Network View for the Network specified by the `networkId` parameter. Cytoscape can have multiple views per network model, but this feature is not exposed in the Cytoscape GUI. GUI access is limited to the first available view only.",
        "operationId" : "deleteFirstNetworkView",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/networks/{networkId}/views/{viewId}.cx" : {
      "get" : {
        "tags" : [ "Network Views" ],
        "summary" : "Get a Network View in CX format",
        "description" : "Returns the Network View specified by the `viewId` and `networkId` parameters in [CX format](http://manual.cytoscape.org/en/stable/Supported_Network_File_Formats.html#cytoscape-cx)",
        "operationId" : "getNetworkViewAsCx",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "viewId",
          "in" : "path",
          "description" : "SUID of the Network View",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/networks/{networkId}/views/first.png" : {
      "get" : {
        "tags" : [ "Network Views" ],
        "summary" : "Get PNG image of the first available network view",
        "description" : "Returns a PNG image of the first available Network View for the Network specified by the `networkId` parameter.\n\nDefault size is 600 px",
        "operationId" : "getFirstImageAsPng",
        "produces" : [ "image/png" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "h",
          "in" : "query",
          "description" : "Height of the image. Width is set automatically",
          "required" : false,
          "type" : "integer",
          "default" : 600,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "PNG image stream."
          }
        }
      }
    },
    "/v1/networks/{networkId}/views/first.svg" : {
      "get" : {
        "tags" : [ "Network Views" ],
        "summary" : "Get SVG image of the first available network view",
        "description" : "Returns an SVG image of the first available Network View for the Network specified by the `networkId` parameter.\n\nDefault size is 600 px",
        "operationId" : "getFirstImageAsSvg",
        "produces" : [ "image/svg+xml" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "h",
          "in" : "query",
          "description" : "Height of the image. Width is set automatically",
          "required" : false,
          "type" : "integer",
          "default" : 600,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "SVG image stream."
          }
        }
      }
    },
    "/v1/networks/{networkId}/views/first.pdf" : {
      "get" : {
        "tags" : [ "Network Views" ],
        "summary" : "Get PDF image of the first available network view",
        "description" : "Returns a PDF of the first available Network View for the Network specified by the `networkId` parameter.\n\nDefault size is 600 px",
        "operationId" : "getFirstImageAsPdf",
        "produces" : [ "image/pdf" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "h",
          "in" : "query",
          "description" : "Height of the image. Width is set automatically",
          "required" : false,
          "type" : "integer",
          "default" : 600,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "PDF image stream."
          }
        }
      }
    },
    "/v1/networks/{networkId}/views/{viewId}.png" : {
      "get" : {
        "tags" : [ "Network Views" ],
        "summary" : "Get PNG image of a network view",
        "description" : "Returns a PNG image of the Network View specified by the `viewId` and `networkId` parameters.\n\nDefault size is 600 px.",
        "operationId" : "getImageAsPng",
        "produces" : [ "image/png" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "viewId",
          "in" : "path",
          "description" : "SUID of the Network View",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "h",
          "in" : "query",
          "description" : "Height of the image. Width is set automatically",
          "required" : false,
          "type" : "integer",
          "default" : 600,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "PNG image stream."
          }
        }
      }
    },
    "/v1/networks/{networkId}/views/{viewId}.svg" : {
      "get" : {
        "tags" : [ "Network Views" ],
        "summary" : "Get SVG image of a network view",
        "description" : "Returns an SVG image of the Network View specified by the `viewId` and `networkId` parameters.\n\nDefault size is 600 px.",
        "operationId" : "getImageAsSvg",
        "produces" : [ "image/svg+xml" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "viewId",
          "in" : "path",
          "description" : "SUID of the Network View",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "h",
          "in" : "query",
          "description" : "Height of the image. Width is set automatically",
          "required" : false,
          "type" : "integer",
          "default" : 600,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "SVG image stream."
          }
        }
      }
    },
    "/v1/networks/{networkId}/views/{viewId}.pdf" : {
      "get" : {
        "tags" : [ "Network Views" ],
        "summary" : "Get PDF image of a network view",
        "description" : "Returns a PDF of the Network View specified by the `viewId` and `networkId` parameters.\n\nDefault size is 500 px.",
        "operationId" : "getImageAsPdf",
        "produces" : [ "image/pdf" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "viewId",
          "in" : "path",
          "description" : "SUID of the Network View",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "PDF image stream."
          }
        }
      }
    },
    "/v1/networks/{networkId}/views/{viewId}/network" : {
      "get" : {
        "tags" : [ "Network Views" ],
        "summary" : "Get the Visual Properties for a Network View",
        "description" : "Returns a list of the Visual Properties for the Network View specified by the `viewId` and `networkId` parameters.\n\nAdditional details on common Visual Properties can be found in the [Basic Visual Lexicon JavaDoc API](http://chianti.ucsd.edu/cytoscape-3.6.1/API/org/cytoscape/view/presentation/property/BasicVisualLexicon.html)",
        "operationId" : "getNetworkVisualProps",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "viewId",
          "in" : "path",
          "description" : "SUID of the Network View",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Visual Property Value"
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Network Views" ],
        "summary" : "Update the Visual Properties for a Network View",
        "description" : "Updates the Visual Properties in the Network View specified by the `viewId` and `networkId` parameters.\n\nExample Visual Properties:\n```\n{\n  \"visualProperty\": \"NETWORK_BACKGROUND_PAINT\",\n  \"value\": \"#000000\"\n}```\n```\n{\n  \"visualProperty\": \"NETWORK_CENTER_X_LOCATION\",\n  \"value\": 250\n}```\n\n\nAdditional details on common Visual Properties can be found in the [Basic Visual Lexicon JavaDoc API](http://chianti.ucsd.edu/cytoscape-3.6.1/API/org/cytoscape/view/presentation/property/BasicVisualLexicon.html)\n\nNote that this sets the Visual Properties temporarily unless the `bypass` parameter is set to `true`. If the `bypass` parameter is set to `true`, the Visual Style will be overridden by these Visual Property values. If the `bypass` parameter is not used or is set to `false`, any Visual Properties set will return to those defined in the Visual Style if the Network View is updated.\n",
        "operationId" : "updateNetworkView",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "Network SUID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "viewId",
          "in" : "path",
          "description" : "Network View SUID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "bypass",
          "in" : "query",
          "description" : "Bypass the Visual Style with these properties",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "A list of Visual Properties and their values.",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Visual Property Value"
            }
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/networks/{networkId}/views/{viewId}/{objectType}/{objectId}/{visualProperty}" : {
      "get" : {
        "tags" : [ "Network Views" ],
        "summary" : "Get a Visual Property for an Object",
        "description" : "Gets the Visual Property specificed by the `visualProperty` parameter for the node or edge specified by the `objectId` parameter in the Network View specified by the `viewId` and `networkId` parameters.\n\nAdditional details on common Visual Properties can be found in the [Basic Visual Lexicon JavaDoc API](http://chianti.ucsd.edu/cytoscape-3.6.1/API/org/cytoscape/view/presentation/property/BasicVisualLexicon.html)\n\n",
        "operationId" : "getSingleVisualPropertyValue",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "viewId",
          "in" : "path",
          "description" : "SUID of the Network View",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "objectType",
          "in" : "path",
          "description" : "Type of Object",
          "required" : true,
          "type" : "string",
          "enum" : [ "nodes", "edges" ]
        }, {
          "name" : "objectId",
          "in" : "path",
          "description" : "SUID of the Object",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "visualProperty",
          "in" : "path",
          "description" : "Name of the Visual Property",
          "required" : true,
          "type" : "string",
          "x-example" : "NODE_SHAPE"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Visual Property Value"
            }
          }
        }
      }
    },
    "/v1/networks/{networkId}/views/{viewId}/{objectType}/{objectId}/{visualProperty}/bypass" : {
      "get" : {
        "tags" : [ "Network Views" ],
        "summary" : "Get the Visual Properties a Visual Style is bypassed with",
        "description" : "Gets the bypass Visual Property specified by the `visualProperty` parameter from the object specified by the `objectId` and `objectType` parameters in the Network View Specified by the `viewId` and `networkId` parameters. The response is the Visual Property that is used in place of the definition provided by the Visual Style.\n\nAdditional details on common Visual Properties can be found in the [Basic Visual Lexicon JavaDoc API](http://chianti.ucsd.edu/cytoscape-3.6.1/API/org/cytoscape/view/presentation/property/BasicVisualLexicon.html)\n\n",
        "operationId" : "getSingleVisualPropertyValueBypass",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "Network SUID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "viewId",
          "in" : "path",
          "description" : "Network View SUID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "objectType",
          "in" : "path",
          "description" : "Type of Object",
          "required" : true,
          "type" : "string",
          "enum" : [ "nodes", "edges" ]
        }, {
          "name" : "objectId",
          "in" : "path",
          "description" : "SUID of the Object",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "visualProperty",
          "in" : "path",
          "description" : "Name of the Visual Property",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SingleVisualPropertyResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Network Views" ],
        "summary" : "Bypass a Visual Style with a set Visual Property",
        "description" : "Bypasses the Visual Style of the object specified by the `objectId` and `objectType` parameters, in the Network View specified by the `viewId` and `networkId` parameters. The Visual Property included in the message body will be used instead of the definition provided by the Visual Style.\n\nExamples of Visual Properties:\n\n```\n{\n  \"visualProperty\": \"NODE_BORDER_WIDTH\",\n  \"value\": 2\n}\n```\n\n```\n{\n  \"visualProperty\": \"EDGE_TRANSPARENCY\",\n  \"value\": 170\n}```\n\n```\n{\n  \"visualProperty\": \"NETWORK_BACKGROUND_PAINT\",\n  \"value\": \"#000000\"\n}```\n\n\nAdditional details on common Visual Properties can be found in the [Basic Visual Lexicon JavaDoc API](http://chianti.ucsd.edu/cytoscape-3.6.1/API/org/cytoscape/view/presentation/property/BasicVisualLexicon.html)",
        "operationId" : "putSingleVisualPropertyValueBypass",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "Network SUID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "viewId",
          "in" : "path",
          "description" : "Network View SUID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "objectType",
          "in" : "path",
          "description" : "Type of Object",
          "required" : true,
          "type" : "string",
          "enum" : [ "nodes", "edges" ]
        }, {
          "name" : "objectId",
          "in" : "path",
          "description" : "SUID of the Object",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "visualProperty",
          "in" : "path",
          "description" : "Name of the Visual Property",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "A Visual Property and its value.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Visual Property Value"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      },
      "delete" : {
        "tags" : [ "Network Views" ],
        "summary" : "Delete the Visual Property a Visual Style is bypassed with",
        "description" : "Deletes the bypass Visual Property specified by the `visualProperty` parameter from the object specified by the `objectId` and `objectType` parameters in the Network View Specified by the `viewId` and `networkId` parameters. When this is done, the Visual Property will be defined by the Visual Style\n\nAdditional details on common Visual Properties can be found in the [Basic Visual Lexicon JavaDoc API](http://chianti.ucsd.edu/cytoscape-3.6.1/API/org/cytoscape/view/presentation/property/BasicVisualLexicon.html)\n\n",
        "operationId" : "deleteSingleVisualPropertyValueBypass",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "viewId",
          "in" : "path",
          "description" : "SUID of the Network View",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "objectType",
          "in" : "path",
          "description" : "Type of Object",
          "required" : true,
          "type" : "string",
          "enum" : [ "nodes", "edges" ]
        }, {
          "name" : "objectId",
          "in" : "path",
          "description" : "SUID of Object",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "visualProperty",
          "in" : "path",
          "description" : "Name of the Visual Property",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CIResponse"
            }
          }
        }
      }
    },
    "/v1/networks/{networkId}/views/{viewId}/network/{visualProperty}" : {
      "get" : {
        "tags" : [ "Network Views" ],
        "summary" : "Get a network Visual Property",
        "description" : "Gets the Network Visual Property specificed by the `visualProperty`, `viewId`, and `networkId` parameters.\n\nAdditional details on common Visual Properties can be found in the [Basic Visual Lexicon JavaDoc API](http://chianti.ucsd.edu/cytoscape-3.6.1/API/org/cytoscape/view/presentation/property/BasicVisualLexicon.html)",
        "operationId" : "getNetworkVisualProp",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "viewId",
          "in" : "path",
          "description" : "SUID of the Network View",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "visualProperty",
          "in" : "path",
          "description" : "Name of the Visual Property",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          }
        }
      }
    },
    "/v1/networks/{networkId}/views/{viewId}/network/{visualProperty}/bypass" : {
      "get" : {
        "tags" : [ "Network Views" ],
        "summary" : "Get the Visual Property the Network Visual Style is bypassed with",
        "description" : "Gets the bypass Visual Property specified by the `visualProperty`, `viewId`, and `networkId` parameters.  The response is the Visual Property that is used in place of the definition provided by the Visual Style.\n\nAdditional details on common Visual Properties can be found in the [Basic Visual Lexicon JavaDoc API](http://chianti.ucsd.edu/cytoscape-3.6.1/API/org/cytoscape/view/presentation/property/BasicVisualLexicon.html)",
        "operationId" : "getNetworkVisualPropBypass",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "viewId",
          "in" : "path",
          "description" : "SUID of the Network View",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "visualProperty",
          "in" : "path",
          "description" : "Name of the Visual Property",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SingleVisualPropertyResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Network Views" ],
        "summary" : "Bypass the Network Visual Style with a set Visual Property",
        "description" : "Bypasses the Visual Style of the Network with the Visual Property specificed by the `visualProperty`, `viewId`, and `networkId` parameters.\n\nAdditional details on common Visual Properties can be found in the [Basic Visual Lexicon JavaDoc API](http://chianti.ucsd.edu/cytoscape-3.6.1/API/org/cytoscape/view/presentation/property/BasicVisualLexicon.html)",
        "operationId" : "putNetworkVisualPropBypass",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "viewId",
          "in" : "path",
          "description" : "SUID of the Network View",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "visualProperty",
          "in" : "path",
          "description" : "Name of the Visual Property",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "A Visual Property and its value.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Visual Property Value"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CIResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Network Views" ],
        "summary" : "Deletes the Visual Property the Network Visual Style is bypassed with",
        "description" : "Deletes the bypass Visual Property specificed by the `visualProperty`, `viewId`, and `networkId` parameters. When this is done, the Visual Property will be defined by the Visual Style\n\nAdditional details on common Visual Properties can be found in the [Basic Visual Lexicon JavaDoc API](http://chianti.ucsd.edu/cytoscape-3.6.1/API/org/cytoscape/view/presentation/property/BasicVisualLexicon.html)",
        "operationId" : "deleteNetworkVisualProp",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "viewId",
          "in" : "path",
          "description" : "SUID of the Network View",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "visualProperty",
          "in" : "path",
          "description" : "Name of the Visual Property",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CIResponse"
            }
          }
        }
      }
    },
    "/v1/networks/{networkId}/views/{viewId}" : {
      "get" : {
        "tags" : [ "Network Views" ],
        "summary" : "Get a Network View (as JSON or a file)",
        "description" : "Gets the Network View specified by the `viewId` and `networkId` parameters.\n\nIf the `file` parameter is left unspecified, the response will contain data in [Cytoscape.js](http://manual.cytoscape.org/en/stable/Supported_Network_File_Formats.html#cytoscape-js-json) format.\n\nIf the `file` parameter is specified, the Network View will be written to a file, and the response will contain the location of the file in the following format:\n\n```\n\n{\n  \"file\": \"/media/HD1/myFiles/networkView.sif\"\n}\n```\n\nThe format of the output file is defined by the extension of the `file` parameter.",
        "operationId" : "getNetworkView",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "viewId",
          "in" : "path",
          "description" : "SUID of the Network View",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "file",
          "in" : "query",
          "description" : "A path to a file relative to the current directory. The format of the file written is defined by the file extension.\n\n| Extension   | Details    |\n| ----------- | -----------|\n| .cys        | Cytoscape Style format |\n| .xml/.xgmml | [XGMML](http://manual.cytoscape.org/en/stable/Supported_Network_File_Formats.html?highlight=xgmml#xgmml-format) format |\n| .nnf        | [NNF](http://manual.cytoscape.org/en/stable/Supported_Network_File_Formats.html#nnf) format |\n| .sif        | [SIF](http://manual.cytoscape.org/en/stable/Supported_Network_File_Formats.html#sif-format) format |\n| .cyjs       | [Cytoscape.js](http://manual.cytoscape.org/en/stable/Supported_Network_File_Formats.html#cytoscape-js-json) format |\n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/" : {
      "get" : {
        "tags" : [ "REST Service" ],
        "summary" : "Get available REST API versions",
        "description" : "Returns a list of available REST API versions. Currently, v1 is the only available version",
        "operationId" : "getVersions",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/session" : {
      "get" : {
        "tags" : [ "Session" ],
        "summary" : "Load a Session from a local file",
        "description" : "Loads a session from a local file and returns the session file name",
        "operationId" : "getSessionFromFile",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "file",
          "in" : "query",
          "description" : "Session file location as an absolute path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FileModel"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Session" ],
        "summary" : "Save current Session to a file",
        "description" : "Saves the current session to a file. If successful, the session file location will be returned.",
        "operationId" : "createSessionFile",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "file",
          "in" : "query",
          "description" : "Session file location as an absolute path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FileModel"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Session" ],
        "summary" : "Delete current Session",
        "description" : "This deletes the current session and initializes a new one. A message is returned to indicate the success of the deletion.",
        "operationId" : "deleteSession",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/MessageModel"
            }
          }
        }
      }
    },
    "/v1/session/name" : {
      "get" : {
        "tags" : [ "Session" ],
        "summary" : "Get current session file name",
        "description" : "Returns the file name for the current Cytoscape session.",
        "operationId" : "getSessionName",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Session File name"
            }
          }
        }
      }
    },
    "/v1/styles/{name}/defaults" : {
      "get" : {
        "tags" : [ "Visual Styles" ],
        "summary" : "Get all default values for the Visual Style",
        "description" : "Returns a list of all the default values for the Visual Style specified by the `name` parameter.",
        "operationId" : "getDefaults",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the Visual Style",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/VisualStyleDefaultsModel"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Visual Styles" ],
        "summary" : "Update the default values for Visual Properties",
        "description" : "Updates the default values for the Visual Properties in the Visual Style specified by the `name` parameter.\n\nAdditional details on common Visual Properties can be found in the [Basic Visual Lexicon JavaDoc API](http://chianti.ucsd.edu/cytoscape-3.6.1/API/org/cytoscape/view/presentation/property/BasicVisualLexicon.html)",
        "operationId" : "updateDefaults",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the Visual Style",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "A list of Visual Property values to update.",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Visual Property Value"
            }
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/styles/{name}.json" : {
      "get" : {
        "tags" : [ "Visual Styles" ],
        "summary" : "Get a Visual Style in Cytoscape.js CSS format.",
        "description" : "Visual Style in [Cytoscape.js CSS](http://js.cytoscape.org/#style) format.",
        "operationId" : "getStyle",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the Visual Style",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          }
        }
      }
    },
    "/v1/styles" : {
      "get" : {
        "tags" : [ "Visual Styles" ],
        "summary" : "Get list of Visual Style names",
        "description" : "Returns a list of all the Visual Style names in the current session.",
        "operationId" : "getStyleNames",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Visual Styles" ],
        "summary" : "Create a new Visual Style from JSON.",
        "description" : "Creates a new Visual Style using the message body.\n\nReturns the title of the new Visual Style. If the title of the Visual Style already existed in the session, a new one will be automatically generated and returned.",
        "operationId" : "createStyle",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The details of the new Visual Style to be created.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/VisualStyleModel"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Title Model"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Visual Styles" ],
        "summary" : "Delete all Visual Styles",
        "description" : "Deletes all vision styles except for default style",
        "operationId" : "deleteAllStyles",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/styles/count" : {
      "get" : {
        "tags" : [ "Visual Styles" ],
        "summary" : "Get number of Visual Styles",
        "description" : "Returns the number of Visual Styles available in the current session",
        "operationId" : "getStyleCount",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CountModel"
            }
          }
        }
      }
    },
    "/v1/styles/{name}" : {
      "get" : {
        "tags" : [ "Visual Styles" ],
        "summary" : "Get a Visual Style with full details",
        "description" : "Returns the Visual Style specified by the `name` parameter.",
        "operationId" : "getStyleFull",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the Visual Style",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/VisualStyleModel"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Visual Styles" ],
        "summary" : "Update name of a Visual Style",
        "description" : "Updates the name of the Visual Style specified by the `name` parameter.",
        "operationId" : "updateStyleName",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Original name of the Visual Style",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "A new name for the Visual Style.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Title Model"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      },
      "delete" : {
        "tags" : [ "Visual Styles" ],
        "summary" : "Delete a Visual Style",
        "description" : "Deletes the Visual Style specified by the `name` parameter.",
        "operationId" : "deleteStyle",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Visual Style Name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/styles/{name}/mappings" : {
      "get" : {
        "tags" : [ "Visual Styles" ],
        "summary" : "Get all Visual Mappings for the Visual Style",
        "description" : "Returns a list of all Visual Mappings used in the Visual Style specified by the `name` parameter.\n\nThe types of mapping available in Cytoscape are explained in depth [here](http://manual.cytoscape.org/en/stable/Styles.html#how-mappings-work). An example of the data format for each is included below. For additional details, such as what Visual Properties supported by each Mapping, click on the relevant JavaDoc API link.\n\n#### Discrete Mapping\n[JavaDoc API](http://chianti.ucsd.edu/cytoscape-3.6.1/API/org/cytoscape/view/vizmap/mappings/DiscreteMapping.html)\n```\n{ \"mappingType\": \"discrete\",\n  \"mappingColumn\": \"interaction\",\n\t \"mappingColumnType\": \"String\",\n\t \"visualProperty\": \"EDGE_WIDTH\", \n\t \"map\": [\n      { \"key\" : \"pd\",\n         \"value\" : \"20\"\n      },\n      { \"key\" : \"pp\",\n        \"value\" : \"1.5\"\n      }\n    ]\n}```\n#### Continuous Mapping\n[JavaDoc API](http://chianti.ucsd.edu/cytoscape-3.6.1/API/org/cytoscape/view/vizmap/mappings/ContinuousMapping.html)\n```\n{ \"mappingType\": \"continuous\",\n  \"mappingColumn\": \"Degree\",\n  \"mappingColumnType\": \"Integer\",\n  \"visualProperty\": \"NODE_SIZE\",\n  \"points\": [\n      { \"value\" : 1,\n        \"lesser\" : \"20\",\n        \"equal\" : \"20\",\n        \"greater\" : \"20\"\n      },\n\t     { \"value\" : 20,\n        \"lesser\" : \"120\",\n        \"equal\" : \"120\",\n        \"greater\" : \"220\"      }\n    ]\n}```\n#### Passthrough Mapping\n[JavaDoc API](http://chianti.ucsd.edu/cytoscape-3.6.1/API/org/cytoscape/view/vizmap/mappings/PassthroughMapping.html)\n```\n{ \"mappingType\": \"passthrough\",\n  \"mappingColumn\": \"name\",\n  \"mappingColumnType\": \"String\",\n  \"visualProperty\": \"EDGE_LABEL\" \n}```\n\nAdditional details on common Visual Properties can be found in the [Basic Visual Lexicon JavaDoc API](http://chianti.ucsd.edu/cytoscape-3.6.1/API/org/cytoscape/view/presentation/property/BasicVisualLexicon.html)",
        "operationId" : "getMappings",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the Visual Style",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/VisualStyleMappingModel"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Visual Styles" ],
        "summary" : "Add a new Visual Mapping",
        "description" : "Create a new Visual Mapping function and add it to the Visual Style specified by the `name` parameter. Existing mappings in the Visual Style will be overidden by the new mappings created.\n\nThe types of mapping available in Cytoscape are explained in depth [here](http://manual.cytoscape.org/en/stable/Styles.html#how-mappings-work). An example of the data format for each is included below. For additional details, such as what Visual Properties supported by each Mapping, click on the relevant JavaDoc API link.\n\n#### Discrete Mapping\n[JavaDoc API](http://chianti.ucsd.edu/cytoscape-3.6.1/API/org/cytoscape/view/vizmap/mappings/DiscreteMapping.html)\n```\n{ \"mappingType\": \"discrete\",\n  \"mappingColumn\": \"interaction\",\n\t \"mappingColumnType\": \"String\",\n\t \"visualProperty\": \"EDGE_WIDTH\", \n\t \"map\": [\n      { \"key\" : \"pd\",\n         \"value\" : \"20\"\n      },\n      { \"key\" : \"pp\",\n        \"value\" : \"1.5\"\n      }\n    ]\n}```\n#### Continuous Mapping\n[JavaDoc API](http://chianti.ucsd.edu/cytoscape-3.6.1/API/org/cytoscape/view/vizmap/mappings/ContinuousMapping.html)\n```\n{ \"mappingType\": \"continuous\",\n  \"mappingColumn\": \"Degree\",\n  \"mappingColumnType\": \"Integer\",\n  \"visualProperty\": \"NODE_SIZE\",\n  \"points\": [\n      { \"value\" : 1,\n        \"lesser\" : \"20\",\n        \"equal\" : \"20\",\n        \"greater\" : \"20\"\n      },\n\t     { \"value\" : 20,\n        \"lesser\" : \"120\",\n        \"equal\" : \"120\",\n        \"greater\" : \"220\"      }\n    ]\n}```\n#### Passthrough Mapping\n[JavaDoc API](http://chianti.ucsd.edu/cytoscape-3.6.1/API/org/cytoscape/view/vizmap/mappings/PassthroughMapping.html)\n```\n{ \"mappingType\": \"passthrough\",\n  \"mappingColumn\": \"name\",\n  \"mappingColumnType\": \"String\",\n  \"visualProperty\": \"EDGE_LABEL\" \n}```\n\nAdditional details on common Visual Properties can be found in the [Basic Visual Lexicon JavaDoc API](http://chianti.ucsd.edu/cytoscape-3.6.1/API/org/cytoscape/view/presentation/property/BasicVisualLexicon.html)",
        "operationId" : "createMappings",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the Visual Style",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "A list of new mappings.",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/VisualStyleMappingModel"
            }
          },
          "x-examples" : {
            "default" : "[{\n      \"mappingType\": \"continuous\",\n      \"mappingColumn\": \"degree.layout\",\n      \"mappingColumnType\": \"Integer\",\n      \"visualProperty\": \"NODE_SIZE\",\n      \"points\": [\n        {\n          \"value\": 1,\n          \"lesser\": \"1.0\",\n          \"equal\": \"40.0\",\n          \"greater\": \"40.0\"\n        },\n        {\n          \"value\": 18,\n          \"lesser\": \"150.0\",\n          \"equal\": \"150.0\",\n          \"greater\": \"1.0\"\n        }\n      ]\n    }"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/styles/{name}/dependencies" : {
      "get" : {
        "tags" : [ "Visual Styles" ],
        "summary" : "Get all Visual Property Dependency statuses",
        "description" : "Returns the status of all the Visual Property Dependencies.",
        "operationId" : "getAllDependencies",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the Visual Style",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Visual Property Dependency"
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Visual Styles" ],
        "summary" : "Set Visual Property Dependencies",
        "description" : "Sets the value of Visual Property dependencies to the values in the message body.",
        "operationId" : "updateDependencies",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the Visual Style",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "A list of dependencies.",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Visual Property Dependency"
            }
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/styles/{name}/mappings/{vpName}" : {
      "delete" : {
        "tags" : [ "Visual Styles" ],
        "summary" : "Delete a Visual Mapping from a Visual Style",
        "description" : "Deletes the Visual Property mapping specified by the `vpName` and `name` parameters.",
        "operationId" : "deleteMapping",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the Visual Style containing the Visual Mapping",
          "required" : true,
          "type" : "string",
          "x-example" : "default"
        }, {
          "name" : "vpName",
          "in" : "path",
          "description" : "Name of the Visual Property that the Visual Mapping controls",
          "required" : true,
          "type" : "string",
          "x-example" : "NODE_SIZE"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/styles/visualproperties/{vp}/values" : {
      "get" : {
        "tags" : [ "Visual Styles" ],
        "summary" : "Get all available values for a Visual Property",
        "description" : "Returns a list of all available values for the Visual Property specified by the `vp` parameter.\n\nThis method is only for Visual Properties with a Discrete Range, such as NODE_SHAPE or EDGE_LINE_TYPE.\n\nAdditional details on common Visual Properties can be found in the [Basic Visual Lexicon JavaDoc API](http://chianti.ucsd.edu/cytoscape-3.6.1/API/org/cytoscape/view/presentation/property/BasicVisualLexicon.html)\n\n",
        "operationId" : "getRangeValues",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "vp",
          "in" : "path",
          "description" : "ID of the Visual Property",
          "required" : true,
          "type" : "string",
          "x-example" : "NODE_SHAPE"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/VisualPropertyValuesModel"
            }
          }
        }
      }
    },
    "/v1/styles/visualproperties/{visualProperty}" : {
      "get" : {
        "tags" : [ "Visual Styles" ],
        "summary" : "Get a Visual Property",
        "description" : "Return the Visual Property specified by the `visualProperty` parameter.\n\nAdditional details on common Visual Properties can be found in the [Basic Visual Lexicon JavaDoc API](http://chianti.ucsd.edu/cytoscape-3.6.1/API/org/cytoscape/view/presentation/property/BasicVisualLexicon.html)",
        "operationId" : "getSingleVisualProperty",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "visualProperty",
          "in" : "path",
          "description" : "ID of the Visual Property",
          "required" : true,
          "type" : "string",
          "x-example" : "NODE_SHAPE"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/VisualPropertyModel"
            }
          }
        }
      }
    },
    "/v1/styles/{name}/mappings/{vp}" : {
      "get" : {
        "tags" : [ "Visual Styles" ],
        "summary" : "Get a Visual Mapping associated with the Visual Property",
        "description" : "Returns the Visual Mapping assigned to the Visual Property specified by the `name` and `vp` parameters.\n\nThe types of mapping available in Cytoscape are explained in depth [here](http://manual.cytoscape.org/en/stable/Styles.html#how-mappings-work). An example of the data format for each is included below. For additional details, such as what Visual Properties supported by each Mapping, click on the relevant JavaDoc API link.\n\n#### Discrete Mapping\n[JavaDoc API](http://chianti.ucsd.edu/cytoscape-3.6.1/API/org/cytoscape/view/vizmap/mappings/DiscreteMapping.html)\n```\n{ \"mappingType\": \"discrete\",\n  \"mappingColumn\": \"interaction\",\n\t \"mappingColumnType\": \"String\",\n\t \"visualProperty\": \"EDGE_WIDTH\", \n\t \"map\": [\n      { \"key\" : \"pd\",\n         \"value\" : \"20\"\n      },\n      { \"key\" : \"pp\",\n        \"value\" : \"1.5\"\n      }\n    ]\n}```\n#### Continuous Mapping\n[JavaDoc API](http://chianti.ucsd.edu/cytoscape-3.6.1/API/org/cytoscape/view/vizmap/mappings/ContinuousMapping.html)\n```\n{ \"mappingType\": \"continuous\",\n  \"mappingColumn\": \"Degree\",\n  \"mappingColumnType\": \"Integer\",\n  \"visualProperty\": \"NODE_SIZE\",\n  \"points\": [\n      { \"value\" : 1,\n        \"lesser\" : \"20\",\n        \"equal\" : \"20\",\n        \"greater\" : \"20\"\n      },\n\t     { \"value\" : 20,\n        \"lesser\" : \"120\",\n        \"equal\" : \"120\",\n        \"greater\" : \"220\"      }\n    ]\n}```\n#### Passthrough Mapping\n[JavaDoc API](http://chianti.ucsd.edu/cytoscape-3.6.1/API/org/cytoscape/view/vizmap/mappings/PassthroughMapping.html)\n```\n{ \"mappingType\": \"passthrough\",\n  \"mappingColumn\": \"name\",\n  \"mappingColumnType\": \"String\",\n  \"visualProperty\": \"EDGE_LABEL\" \n}```\n\nAdditional details on common Visual Properties can be found in the [Basic Visual Lexicon JavaDoc API](http://chianti.ucsd.edu/cytoscape-3.6.1/API/org/cytoscape/view/presentation/property/BasicVisualLexicon.html)",
        "operationId" : "getMapping",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the Visual Style containing the Visual Property mapping",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "vp",
          "in" : "path",
          "description" : "Name of the Visual Property that the Visual Mapping controls",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/VisualStyleMappingModel"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Visual Styles" ],
        "summary" : "Update an existing Visual Mapping",
        "description" : "Update the visual mapping specified by the `name` and `vp` parameters.\n\nThe types of mapping available in Cytoscape are explained in depth [here](http://manual.cytoscape.org/en/stable/Styles.html#how-mappings-work). An example of the data format for each is included below. For additional details, such as what Visual Properties supported by each Mapping, click on the relevant JavaDoc API link.\n\n#### Discrete Mapping\n[JavaDoc API](http://chianti.ucsd.edu/cytoscape-3.6.1/API/org/cytoscape/view/vizmap/mappings/DiscreteMapping.html)\n```\n{ \"mappingType\": \"discrete\",\n  \"mappingColumn\": \"interaction\",\n\t \"mappingColumnType\": \"String\",\n\t \"visualProperty\": \"EDGE_WIDTH\", \n\t \"map\": [\n      { \"key\" : \"pd\",\n         \"value\" : \"20\"\n      },\n      { \"key\" : \"pp\",\n        \"value\" : \"1.5\"\n      }\n    ]\n}```\n#### Continuous Mapping\n[JavaDoc API](http://chianti.ucsd.edu/cytoscape-3.6.1/API/org/cytoscape/view/vizmap/mappings/ContinuousMapping.html)\n```\n{ \"mappingType\": \"continuous\",\n  \"mappingColumn\": \"Degree\",\n  \"mappingColumnType\": \"Integer\",\n  \"visualProperty\": \"NODE_SIZE\",\n  \"points\": [\n      { \"value\" : 1,\n        \"lesser\" : \"20\",\n        \"equal\" : \"20\",\n        \"greater\" : \"20\"\n      },\n\t     { \"value\" : 20,\n        \"lesser\" : \"120\",\n        \"equal\" : \"120\",\n        \"greater\" : \"220\"      }\n    ]\n}```\n#### Passthrough Mapping\n[JavaDoc API](http://chianti.ucsd.edu/cytoscape-3.6.1/API/org/cytoscape/view/vizmap/mappings/PassthroughMapping.html)\n```\n{ \"mappingType\": \"passthrough\",\n  \"mappingColumn\": \"name\",\n  \"mappingColumnType\": \"String\",\n  \"visualProperty\": \"EDGE_LABEL\" \n}```\n\nAdditional details on common Visual Properties can be found in the [Basic Visual Lexicon JavaDoc API](http://chianti.ucsd.edu/cytoscape-3.6.1/API/org/cytoscape/view/presentation/property/BasicVisualLexicon.html)",
        "operationId" : "updateMapping",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the Visual Style containing the Visual Mapping",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "vp",
          "in" : "path",
          "description" : "Name of the Visual Property that the Visual Mapping controls",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "A list of new mappings.",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/VisualStyleMappingModel"
            }
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/styles/visualproperties" : {
      "get" : {
        "tags" : [ "Visual Styles" ],
        "summary" : "Get all available Visual Properties",
        "description" : "Get all available Visual Properties.\n\nAdditional details on common Visual Properties can be found in the [Basic Visual Lexicon JavaDoc API](http://chianti.ucsd.edu/cytoscape-3.6.1/API/org/cytoscape/view/presentation/property/BasicVisualLexicon.html)",
        "operationId" : "getVisualProperties",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/VisualPropertyModel"
              }
            }
          }
        }
      }
    },
    "/v1/styles/{name}/defaults/{vp}" : {
      "get" : {
        "tags" : [ "Visual Styles" ],
        "summary" : "Get a default value for the Visual Property",
        "description" : "Returns the default value for the Visual Property specified by the `name` and `vp` parameters.\n\nAdditional details on common Visual Properties can be found in the [Basic Visual Lexicon JavaDoc API](http://chianti.ucsd.edu/cytoscape-3.6.1/API/org/cytoscape/view/presentation/property/BasicVisualLexicon.html)\n\n",
        "operationId" : "getDefaultValue",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the Visual Style containing the Visual Property",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "vp",
          "in" : "path",
          "description" : "Name of the Visual Property",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Visual Property Value"
            }
          }
        }
      }
    },
    "/v1/networks/{networkId}/tables/{tableType}/rows" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "Get all rows in a table",
        "description" : "Returns all rows from the table specified by `networkId` and `tableType` parameters. Returns a JSON representation of an array of rows.\n\n```\n[\n  {\n    \"SUID\": 101,\n    \"gene_name\": \"brca1\",\n    \"exp\": 0.1\n  },\n  {\n    \"SUID\": 102,\n    \"gene_name\": \"brca2\",\n    \"exp\": 0.2\n  }\n]\n```",
        "operationId" : "getRows",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the network containing the table",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "tableType",
          "in" : "path",
          "description" : "Table Type",
          "required" : true,
          "type" : "string",
          "enum" : [ "defaultnode", "defaultedge", "defaultnetwork" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Row Data"
              }
            }
          }
        }
      }
    },
    "/v1/networks/{networkId}/tables/{tableType}.csv" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "Get a table as CSV",
        "description" : "Returns a CSV representation of the table specified by the `networkId` and `tableType` parameters. All column names are included in the first row.",
        "operationId" : "getTableAsCsv",
        "produces" : [ "text/plain" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the network containing the table",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "tableType",
          "in" : "path",
          "description" : "Table type",
          "required" : true,
          "type" : "string",
          "enum" : [ "defaultnode", "defaultedge", "defaultnetwork" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          }
        }
      }
    },
    "/v1/networks/{networkId}/tables/{tableType}.tsv" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "Get a table as TSV (tab delimited text)",
        "description" : "Returns a TSV (tab delimited text) representation of the table specified by the `networkId` and `tableType` parameters. All column names are included in the first row.",
        "operationId" : "getTableAsTsv",
        "produces" : [ "text/plain" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the network containing the table",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "tableType",
          "in" : "path",
          "description" : "Table type",
          "required" : true,
          "type" : "string",
          "enum" : [ "defaultnode", "defaultedge", "defaultnetwork" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          }
        }
      }
    },
    "/v1/networks/{networkId}/tables/{tableType}/columns/{columnName}" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "Get all values in a column",
        "description" : "Returns all the values for the column specified by the `columnType` parameter, in the table specified by the `networkId` and `tableType` parameters.",
        "operationId" : "getColumnValues",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "tableType",
          "in" : "path",
          "description" : "Type of Table",
          "required" : true,
          "type" : "string",
          "enum" : [ "defaultnode", "defaultedge", "defaultnetwork" ]
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Name of the Column",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Cytoscape Column Values"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Tables" ],
        "summary" : "Update values in a column",
        "description" : "Sets the values for cells in the table specified by the `tableType` and `networkId` parameters.\n\nIf the 'default` parameter is not specified, the message body should consist of key-value pairs with which to set values.\n\nIf the `default` parameter is specified, its value will be used for every cell in the column. This is useful to set columns like \"selected.\"",
        "operationId" : "updateColumnValues",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the network containing the table",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "tableType",
          "in" : "path",
          "description" : "The type of table",
          "required" : true,
          "type" : "string",
          "enum" : [ "defaultnode", "defaultedge", "defaultnetwork" ]
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Name of the column in which to set values",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "default",
          "in" : "query",
          "description" : "Default Value. If this value is provided, all cells will be set to this.",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Array of SUID Keyed values",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/SUIDKeyValueModel"
            }
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      },
      "delete" : {
        "tags" : [ "Tables" ],
        "summary" : "Delete a column in a table",
        "description" : "Deletes the column specified by the `columnName` parameter from the table speficied by the `tableType` and `networkId` parameters.",
        "operationId" : "deleteColumn",
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the network containing the table from which to delete the column",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "tableType",
          "in" : "path",
          "description" : "Table Type from which to delete the column",
          "required" : true,
          "type" : "string",
          "enum" : [ "defaultnode", "defaultedge", "defaultnetwork" ]
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Name of the column to delete",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/networks/{networkId}/tables/{tableType}/rows/{primaryKey}/{columnName}" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "Get a value from a cell",
        "description" : "Return the value of a cell specified by the `primaryKey` and `columnName` parameters in the table specified by the `tableType` and `networkId` parameters.\n\nReturns a JSON representation of a String, Boolean, Number, or List.",
        "operationId" : "getCell",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the network containing the table",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "tableType",
          "in" : "path",
          "description" : "Table type",
          "required" : true,
          "type" : "string",
          "enum" : [ "defaultnode", "defaultedge", "defaultnetwork" ]
        }, {
          "name" : "primaryKey",
          "in" : "path",
          "description" : "Primary key of the row Object, normally an SUID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Name of the Column",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/v1/networks/{networkId}/tables/{tableType}/rows/{primaryKey}" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "Get a row in the table",
        "description" : "Gets a row matching the value specified by the `primaryKey` parameter from the table specified by the `tableType` and `networkId` parameters.\n\nData is represented by column names and their values.\n\n```json\n{\n  \"name\": \"Hodor 1\",\n  \"value\": 0.11,\n  \"matched\": false\n  ...\n}\n```",
        "operationId" : "getRow",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the network containing the table",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "tableType",
          "in" : "path",
          "description" : "Table type",
          "required" : true,
          "type" : "string",
          "enum" : [ "defaultnode", "defaultedge", "defaultnetwork" ]
        }, {
          "name" : "primaryKey",
          "in" : "path",
          "description" : "Primary key of the row Object, normally an SUID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Row Data"
            }
          }
        }
      }
    },
    "/v1/networks/{networkId}/tables" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "Get all Tables assigned to the Network",
        "description" : "Returns every table in the network specified by the `networkId` parameter.",
        "operationId" : "getTables",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Cytoscape Table with Rows"
              }
            }
          }
        }
      }
    },
    "/v1/networks/{networkId}/tables/{tableType}/columns" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "Get all columns in a table",
        "description" : "Returns all the columns in the table specified by the `networkId` and `tableType` parameters.",
        "operationId" : "getColumnNames",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the network containing the table",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "tableType",
          "in" : "path",
          "description" : "Table Type",
          "required" : true,
          "type" : "string",
          "enum" : [ "defaultnode", "defaultedge", "defaultnetwork" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Cytoscape Column"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Tables" ],
        "summary" : "Create new column(s) in the table",
        "description" : "Creates a new, empty column in the table specified by the `tableType` parameter, in the network specified by the `networkId` parameter.\n\nThis resource can also accept an array of new columns to create multiple columns.",
        "operationId" : "createColumn",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the Network",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "tableType",
          "in" : "path",
          "description" : "Table Type",
          "required" : true,
          "type" : "string",
          "enum" : [ "defaultnode", "defaultedge", "defaultnetwork" ]
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "New Column Info",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NewColumnParameterModel"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Column(s) createed"
          },
          "412" : {
            "description" : "Could not process column JSON"
          }
        }
      },
      "put" : {
        "tags" : [ "Tables" ],
        "summary" : "Update a column name",
        "description" : "Renames an existing column in the table specified by the `tableType` and `networkId` parameters.",
        "operationId" : "updateColumnName",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the network containing the table",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "tableType",
          "in" : "path",
          "description" : "Table Type",
          "required" : true,
          "type" : "string",
          "enum" : [ "defaultnode", "defaultedge", "defaultnetwork" ]
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Old and new column name",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RenameModel"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/networks/{networkId}/tables/{tableType}" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "Get a default table",
        "description" : "Returns the table specified by the `networkId` and 'tableType' parameters.",
        "operationId" : "getTable",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID of the network containing the table",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "tableType",
          "in" : "path",
          "description" : "Table type",
          "required" : true,
          "type" : "string",
          "enum" : [ "defaultnode", "defaultedge", "defaultnetwork" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Cytoscape Table with Rows"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Tables" ],
        "summary" : "Update default node/edge/network data table",
        "description" : "Updates the table specified by the `tableType` and `networkId` parameters.  New columns will be created if they do not exist in the target table.\n\nCurrent limitations:\n* Numbers are handled as Double\n* List column is not supported in this version\n",
        "operationId" : "updateTable",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "networkId",
          "in" : "path",
          "description" : "SUID containing the table",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "tableType",
          "in" : "path",
          "description" : "Type of table",
          "required" : true,
          "type" : "string",
          "enum" : [ "defaultnode", "defaultedge", "defaultnetwork" ]
        }, {
          "name" : "class",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "local" ]
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The data with which to update the table.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Table Update Data"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/ui/lod" : {
      "put" : {
        "tags" : [ "User Interface" ],
        "summary" : "Toggle level of graphics details (LoD)",
        "description" : "Switch between full graphics details <---> fast rendering mode.\n\nReturns a success message.",
        "operationId" : "updateLodState",
        "produces" : [ "application/json;charset=utf-8" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/MessageModel"
            }
          }
        }
      }
    },
    "/v1/ui/panels" : {
      "get" : {
        "tags" : [ "User Interface" ],
        "summary" : "Get status of all CytoPanels",
        "description" : "Returns all CytoPanels and their statuses.",
        "operationId" : "getAllPanelStatus",
        "produces" : [ "application/json;charset=utf-8" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Cytoscape's GUI Panel Element"
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "User Interface" ],
        "summary" : "Update CytoPanel states",
        "description" : "Updates the status(es) of available CytoPanels.",
        "operationId" : "updatePanelStatus",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "A list of CytoPanels with states.",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Cytoscape's GUI Panel Element"
            }
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/ui/panels/{panelName}" : {
      "get" : {
        "tags" : [ "User Interface" ],
        "summary" : "Get status of a CytoPanel",
        "description" : "Returns the status of the CytoPanel specified by the `panelName` parameter.",
        "operationId" : "getPanelStatus",
        "produces" : [ "application/json;charset=utf-8" ],
        "parameters" : [ {
          "name" : "panelName",
          "in" : "path",
          "description" : "Name of the CytoPanel",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Cytoscape's GUI Panel Element"
            }
          }
        }
      }
    },
    "/v1/ui" : {
      "get" : {
        "tags" : [ "User Interface" ],
        "summary" : "Get status of Desktop",
        "description" : "Returns the status of the Desktop",
        "operationId" : "getDesktop",
        "produces" : [ "application/json;charset=utf-8" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Cytoscape Desktop Availability"
            }
          }
        }
      }
    }
  },
  "definitions" : {
    "CIError" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "integer",
          "format" : "int32"
        },
        "type" : {
          "type" : "string"
        },
        "message" : {
          "type" : "string"
        },
        "link" : {
          "type" : "string",
          "format" : "uri"
        }
      }
    },
    "Copycat Layout Response" : {
      "type" : "object",
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/CopycatLayoutResult"
        },
        "errors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CIError"
          }
        }
      },
      "description" : "Number of successfully and unsuccessfully mappes node locations"
    },
    "CopycatLayoutResult" : {
      "type" : "object",
      "required" : [ "mappedNodeCount", "unmappedNodeCount" ],
      "properties" : {
        "mappedNodeCount" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of successfully mapped nodes"
        },
        "unmappedNodeCount" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of unmapped nodes in the target network."
        }
      }
    },
    "CIResponse" : {
      "type" : "object",
      "properties" : {
        "data" : {
          "type" : "object"
        },
        "errors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CIError"
          }
        }
      }
    },
    "Copycat Layout Parameters" : {
      "type" : "object",
      "properties" : {
        "sourceColumn" : {
          "type" : "string",
          "example" : "name",
          "description" : "A node column used to copy nodes in the source network to nodes in the target network"
        },
        "targetColumn" : {
          "type" : "string",
          "example" : "name",
          "description" : "A node column used to copy nodes in the target network to nodes in the source network"
        },
        "selectUnmapped" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Select unmapped nodes"
        },
        "gridUnmapped" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Layout unmapped nodes in a grid"
        }
      },
      "description" : "Parameters for copying one layout onto another"
    },
    "App Info Response" : {
      "type" : "object",
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/AppInfoResponse"
        },
        "errors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CIError"
          }
        }
      }
    },
    "AppInfoResponse" : {
      "type" : "object",
      "properties" : {
        "appVersion" : {
          "type" : "string",
          "description" : "CyNDEx-2 app version"
        },
        "apiVersion" : {
          "type" : "string",
          "description" : "CyNDEx-2 REST API version"
        },
        "appName" : {
          "type" : "string",
          "description" : "Official name of this app"
        },
        "description" : {
          "type" : "string",
          "description" : "Short description of this app"
        }
      },
      "description" : "Basic information of CyNDEx-2 app and its REST API."
    },
    "NDEx Base Response" : {
      "type" : "object",
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/NdexBaseResponse"
        },
        "errors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CIError"
          }
        }
      }
    },
    "NdexBaseResponse" : {
      "type" : "object",
      "properties" : {
        "suid" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Cytoscape session-unique ID (SUID) of the new network imported from NDEx"
        },
        "uuid" : {
          "type" : "string",
          "description" : "NDEx network UUID"
        }
      },
      "description" : "Response for import API call."
    },
    "NdexSaveParameters" : {
      "type" : "object",
      "required" : [ "isPublic", "metadata", "password", "serverUrl", "username" ],
      "properties" : {
        "username" : {
          "type" : "string",
          "example" : "username",
          "description" : "NDEx username"
        },
        "password" : {
          "type" : "string",
          "example" : "password",
          "description" : "Password for the NDEx account"
        },
        "serverUrl" : {
          "type" : "string",
          "example" : "http://ndexbio.org/v2",
          "description" : "URL of NDEx V2 API server"
        },
        "metadata" : {
          "type" : "object",
          "description" : "Network metadata",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "isPublic" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Visibility of network"
        }
      },
      "description" : "Required parameters for saving network(s) to NDEx."
    },
    "SimpleNetworkSummary" : {
      "type" : "object",
      "properties" : {
        "suid" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "SUID of the current network"
        },
        "uuid" : {
          "type" : "string",
          "description" : "NDEx UUID of the current network"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the current network"
        },
        "props" : {
          "type" : "object",
          "description" : "Network properties (attributes) in current network's table",
          "additionalProperties" : {
            "type" : "object"
          }
        }
      },
      "description" : "Summary of a network."
    },
    "Summary Response" : {
      "type" : "object",
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/SummaryResponse"
        },
        "errors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CIError"
          }
        }
      }
    },
    "SummaryResponse" : {
      "type" : "object",
      "properties" : {
        "currentNetworkSuid" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "SUID of the current network"
        },
        "currentRootNetwork" : {
          "description" : "Summary of the collection (= root network)",
          "$ref" : "#/definitions/SimpleNetworkSummary"
        },
        "members" : {
          "type" : "array",
          "description" : "Summary of all networks in the collection",
          "items" : {
            "$ref" : "#/definitions/SimpleNetworkSummary"
          }
        }
      },
      "description" : "Summary of a network collection."
    },
    "NdexImportParams" : {
      "type" : "object",
      "required" : [ "serverUrl", "uuid" ],
      "properties" : {
        "serverUrl" : {
          "type" : "string",
          "example" : "http://ndexbio.org/v2",
          "description" : "URL of NDEx V2 API server"
        },
        "uuid" : {
          "type" : "string",
          "description" : "UUID of the NDEx network"
        },
        "username" : {
          "type" : "string",
          "example" : "username",
          "description" : "NDEx username"
        },
        "password" : {
          "type" : "string",
          "example" : "password",
          "description" : "Password for the NDEx account"
        },
        "accessKey" : {
          "type" : "string",
          "description" : "NDEx access key"
        }
      },
      "description" : "Required parameters for loading network(s) from NDEx."
    },
    "Diffusion App Response" : {
      "type" : "object",
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/Diffusion Result Columns"
        },
        "errors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CIError"
          }
        }
      },
      "description" : "Diffusion Analysis Results in CI Format"
    },
    "Diffusion Result Columns" : {
      "type" : "object",
      "required" : [ "heatColumn", "rankColumn" ],
      "properties" : {
        "heatColumn" : {
          "type" : "string",
          "example" : "diffusion_output_heat",
          "description" : "The node column containing the result of the diffusion process, corresponding to d in the diffusion equation."
        },
        "rankColumn" : {
          "type" : "string",
          "example" : "diffusion_output_rank",
          "description" : "The node column containing rank according to output heat. This column is recommended for analysis, as it is very robust to parameter choice."
        }
      }
    },
    "Diffusion Parameters" : {
      "type" : "object",
      "properties" : {
        "heatColumnName" : {
          "type" : "string",
          "example" : "diffusion_input",
          "description" : "A node column name intended to override the default table column 'diffusion_input'. This represents the query vector and corresponds to h in the diffusion equation."
        },
        "time" : {
          "type" : "number",
          "format" : "double",
          "example" : 0.1,
          "description" : "The extent of spread over the network. This corresponds to t in the diffusion equation."
        }
      },
      "description" : "Parameters for Diffusion analysis"
    },
    "LayoutColumnTypesModel" : {
      "type" : "object",
      "properties" : {
        "compatibleNodeColumnDataTypes" : {
          "type" : "array",
          "description" : "Types of Compatible Node Columns",
          "items" : {
            "type" : "string",
            "enum" : [ "Double", "String", "Boolean", "Long", "Integer", "List" ]
          }
        },
        "compatibleEdgeColumnDataTypes" : {
          "type" : "array",
          "description" : "Types of Compatible Edge Columns",
          "items" : {
            "type" : "string",
            "enum" : [ "Double", "String", "Boolean", "Long", "Integer", "List" ]
          }
        }
      }
    },
    "LayoutModel" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Unique internal name of the Layout"
        },
        "longName" : {
          "type" : "string",
          "description" : "Human-readable name of the Layout. This can be seen primarily in the Cytoscape GUI."
        },
        "parameters" : {
          "type" : "array",
          "description" : "Parameters for this layout and their values.",
          "items" : {
            "$ref" : "#/definitions/LayoutParameterModel"
          }
        },
        "compatibleColumnDataTypes" : {
          "type" : "array",
          "description" : "Column Types that can be used by this layout.",
          "items" : {
            "$ref" : "#/definitions/LayoutColumnTypesModel"
          }
        }
      }
    },
    "LayoutParameterModel" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the Parameter"
        },
        "value" : {
          "type" : "object",
          "description" : "The value of this Parameter as a JSON primitive"
        },
        "description" : {
          "type" : "string",
          "description" : "Long-form description of Parameter"
        },
        "type" : {
          "type" : "string",
          "description" : "The type of Parameter, represented as the simple name of its Java class"
        }
      }
    },
    "MessageModel" : {
      "type" : "object",
      "properties" : {
        "message" : {
          "type" : "string",
          "description" : "Message text"
        }
      }
    },
    "LayoutParameterValueModel" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the Parameter"
        },
        "value" : {
          "type" : "object",
          "description" : "The value of this Parameter as a JSON primitive"
        }
      }
    },
    "AppModel" : {
      "type" : "object",
      "properties" : {
        "bundleName" : {
          "type" : "string",
          "description" : "If this App is implemented as an [OSGi bundle](https://osgi.org/javadoc/r4v43/core/org/osgi/framework/Bundle.html), this field contains its `Bundle-Name` header"
        },
        "bundleSymbolicName" : {
          "type" : "string",
          "description" : "If this App is implemented as an [OSGi bundle](https://osgi.org/javadoc/r4v43/core/org/osgi/framework/Bundle.html), this field contains its `Bundle-SymbolicName` header"
        },
        "bundleVersion" : {
          "type" : "string",
          "description" : "If this App is implemented as an [OSGi bundle](https://osgi.org/javadoc/r4v43/core/org/osgi/framework/Bundle.html), this field contains its `Bundle-Version` header"
        },
        "bundleState" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "If this App is implemented as an [OSGi bundle](https://osgi.org/javadoc/r4v43/core/org/osgi/framework/Bundle.html), this field contains its state.",
          "enum" : [ 1, 2, 4, 8, 16, 32 ]
        }
      }
    },
    "Cytoscape Table" : {
      "type" : "object",
      "required" : [ "SUID", "mutable", "primaryKey", "public", "title" ],
      "properties" : {
        "SUID" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "SUID of the Table"
        },
        "title" : {
          "type" : "string",
          "description" : "Title"
        },
        "mutable" : {
          "type" : "string",
          "description" : "Mutable"
        },
        "primaryKey" : {
          "type" : "string",
          "description" : "Primary Key"
        },
        "public" : {
          "type" : "boolean",
          "description" : "Public. This is true if this table is visible by default in the Cytoscape GUI"
        }
      },
      "description" : "A Cytoscape table definition"
    },
    "Cytoscape Table with Rows" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Cytoscape Table"
      }, {
        "type" : "object",
        "required" : [ "rows" ],
        "properties" : {
          "rows" : {
            "type" : "array",
            "description" : "Rows in this Table",
            "items" : {
              "$ref" : "#/definitions/Row Data"
            }
          }
        },
        "description" : "A definition of a column from a Cytoscape table, and a list of its rows."
      } ]
    },
    "Row Data" : {
      "type" : "object",
      "description" : "Table data associated with this row. Data is represented by column names and their values.\n\n```json\n{\n  \"name\": \"Hodor 1\",\n  \"value\": 0.11,\n  \"matched\": false\n  ...\n}\n```"
    },
    "CountModel" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "Count value."
        }
      }
    },
    "Cytoscape Column" : {
      "type" : "object",
      "required" : [ "immutable", "name", "primaryKey", "type" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "Weight",
          "description" : "Column Name"
        },
        "type" : {
          "type" : "string",
          "example" : "Double",
          "description" : "Column Data Type",
          "enum" : [ "Double", "String", "Boolean", "Long", "Integer", "List" ]
        },
        "listType" : {
          "type" : "boolean",
          "example" : false,
          "description" : "If the type of this column is list, this specifies the type of data in the list."
        },
        "immutable" : {
          "type" : "boolean",
          "example" : false,
          "description" : "If true, this column is immutable."
        },
        "primaryKey" : {
          "type" : "boolean",
          "example" : false,
          "description" : "If true, this column acts as the primary key for this table."
        }
      },
      "description" : "A column definition in a Cytoscape table"
    },
    "Table Update Data" : {
      "type" : "object",
      "required" : [ "data" ],
      "properties" : {
        "key" : {
          "type" : "string",
          "example" : "SUID",
          "description" : "The column in the target table to use as a key. If not specified, SUID will be used."
        },
        "dataKey" : {
          "type" : "string",
          "example" : "id",
          "description" : "The field in the row data to use as a key. If not specified, SUID will be used."
        },
        "data" : {
          "type" : "array",
          "description" : "The row data with which to update the table.\n\nEach row entry should consist of pairs of keys and values, including one that supplies a value for the `dataKey` key. \n```\n[\n  {\n    \"id\": 12345,\n    \"gene_name\": \"brca1\",\n    \"exp1\": 0.11,\n    \"exp2\": 0.2\n  },...\n]\n```\n",
          "items" : {
            "$ref" : "#/definitions/Row Data"
          }
        }
      }
    },
    "GroupSUIDModel" : {
      "type" : "object",
      "properties" : {
        "groupSUID" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "SUID of the Node representing the group."
        }
      }
    },
    "NewGroupParameterModel" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Name of the Group."
        },
        "nodes" : {
          "type" : "array",
          "description" : "Nodes contained in the Group, represented as SUIDs",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      }
    },
    "A Group of Cytoscape Nodes and Edges" : {
      "type" : "object",
      "properties" : {
        "SUID" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "SUID of the Node representing the group."
        },
        "collapsed" : {
          "type" : "boolean",
          "description" : "The collapsed value of this group. If this is `true`, only the Node representing this group will be visible, and all the nodes and edges contained by it will not."
        },
        "nodes" : {
          "type" : "array",
          "description" : "The Nodes contained by this Group represented by SUIDs",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "internal_edges" : {
          "type" : "array",
          "description" : "The Edges contained by this Group represented by SUIDs",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "external_edges" : {
          "type" : "array",
          "description" : "Edges from outside this Group that connect to its nodes, represented by SUIDs",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      }
    },
    "Cytoscape and CyREST API Versions" : {
      "type" : "object",
      "properties" : {
        "apiVersion" : {
          "type" : "string",
          "description" : "CyREST API Version"
        },
        "cytoscapeVersion" : {
          "type" : "string",
          "description" : "Cytoscape Version"
        }
      }
    },
    "Memory Status" : {
      "type" : "object",
      "properties" : {
        "usedMemory" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Memory used by the JVM, in MB"
        },
        "freeMemory" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Free Memory available to the JVM, in MB"
        },
        "totalMemory" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Total Memory available to the JVM, in MB"
        },
        "maxMemory" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Maximum Memory that the JVM will use, in MB"
        }
      },
      "description" : "Details on memory use and availability."
    },
    "ServerStatusModel" : {
      "type" : "object",
      "properties" : {
        "apiVersion" : {
          "type" : "string",
          "description" : "CyREST API Version"
        },
        "numberOfCores" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of Processor Cores Available"
        },
        "memoryStatus" : {
          "description" : "Details on memory use and availability.",
          "$ref" : "#/definitions/Memory Status"
        }
      }
    },
    "SUIDNameModel" : {
      "type" : "object",
      "properties" : {
        "SUID" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "SUID of the Object"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the Object. This is the content of the Objects `name` column in its default table."
        }
      }
    },
    "NetworkSUIDModel" : {
      "type" : "object",
      "properties" : {
        "networkSUID" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "SUID of the Network"
        }
      }
    },
    "Created Edge" : {
      "type" : "object",
      "properties" : {
        "SUID" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 203,
          "description" : "SUID of the new Edge"
        },
        "source" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 101,
          "description" : "SUID of the Edge's Source Node"
        },
        "target" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 102,
          "description" : "SUID of the Edge's Target Node"
        }
      }
    },
    "New Edge Parameter" : {
      "type" : "object",
      "required" : [ "source", "target" ],
      "properties" : {
        "source" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 101,
          "description" : "The SUID of the source node for the new edge"
        },
        "target" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 102,
          "description" : "The SUID of the target node for the new edge"
        },
        "directed" : {
          "type" : "boolean",
          "example" : true,
          "description" : "The `directed` property of the edge. This is `true` if the edge is directed."
        },
        "interaction" : {
          "type" : "string",
          "example" : "pp",
          "description" : "The value to include in the new edge's `interaction` column."
        }
      }
    },
    "NetworkViewSUIDModel" : {
      "type" : "object",
      "properties" : {
        "networkViewSUID" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "SUID of the Network View"
        }
      }
    },
    "NetworkViewSUIDResponse" : {
      "type" : "object",
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/NetworkViewSUIDModel"
        },
        "errors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CIError"
          }
        }
      }
    },
    "NetworkSUIDResponse" : {
      "type" : "object",
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/NetworkSUIDModel"
        },
        "errors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CIError"
          }
        }
      }
    },
    "Edge Data" : {
      "type" : "object",
      "properties" : {
        "data" : {
          "description" : "Associated Data from the edge table. Data is represented by column names and their values.\n\n```json\n{\n  \"name\": \"Hodor 1\",\n  \"value\": 0.11,\n  \"matched\": false\n  ...\n}\n```",
          "$ref" : "#/definitions/Row data associated with the EdgeData is represented by column names and their values.\n\n```json\n{\n  \"name\": \"Hodor 1\",\n  \"value\": 0.11,\n  \"matched\": false\n  ...\n}\n```"
        }
      }
    },
    "Row data associated with the EdgeData is represented by column names and their values.\n\n```json\n{\n  \"name\": \"Hodor 1\",\n  \"value\": 0.11,\n  \"matched\": false\n  ...\n}\n```" : {
      "type" : "object",
      "required" : [ "source", "target" ],
      "properties" : {
        "source" : {
          "type" : "string",
          "description" : "SUID of the Edge's Source Node"
        },
        "target" : {
          "type" : "string",
          "description" : "SUID of the Edge's Target Node"
        }
      }
    },
    "InputStream" : {
      "type" : "object"
    },
    "Node Data" : {
      "type" : "object",
      "properties" : {
        "data" : {
          "description" : "Associated Data from the Node Table. Data is represented by column names and their values.\n\n```json\n{\n  \"name\": \"Hodor 1\",\n  \"value\": 0.11,\n  \"matched\": false\n  ...\n}\n```",
          "$ref" : "#/definitions/Node Data"
        }
      }
    },
    "Visual Property Value" : {
      "type" : "object",
      "properties" : {
        "visualProperty" : {
          "type" : "string",
          "example" : "VISUAL_PROPERTY_NAME",
          "description" : "Unique internal name of the Visual Property."
        },
        "value" : {
          "type" : "object",
          "description" : "Serialized value of the Visual Property, or null."
        }
      }
    },
    "ObjectVisualPropertyValueModel" : {
      "type" : "object",
      "properties" : {
        "SUID" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "SUID of the Object"
        },
        "view" : {
          "type" : "array",
          "description" : "List of the Objects Visual Properties",
          "items" : {
            "$ref" : "#/definitions/Visual Property Value"
          }
        }
      }
    },
    "SingleVisualPropertyResponse" : {
      "type" : "object",
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/Visual Property Value"
        },
        "errors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CIError"
          }
        }
      }
    },
    "FileModel" : {
      "type" : "object",
      "required" : [ "file" ],
      "properties" : {
        "file" : {
          "type" : "string",
          "description" : "Full name of the file."
        }
      }
    },
    "Session File name" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Full file name for the Session"
        }
      }
    },
    "VisualStyleDefaultsModel" : {
      "type" : "object",
      "properties" : {
        "defaults" : {
          "type" : "array",
          "description" : "A list of Visual Properties and their default values.",
          "items" : {
            "$ref" : "#/definitions/Visual Property Value"
          }
        }
      }
    },
    "A single point in the Continuous Mapping Graph" : {
      "type" : "object",
      "properties" : {
        "value" : {
          "type" : "number",
          "format" : "double",
          "description" : "Value of the Column Cell (x coordinate in the Cytoscape GUI)"
        },
        "lesser" : {
          "type" : "string",
          "description" : "Will be used for interpolation upon smaller domain values"
        },
        "equal" : {
          "type" : "string",
          "description" : "Will be used when the domain value is exactly equal to the associated boundary domain value"
        },
        "greater" : {
          "type" : "string",
          "description" : "Will be used for interpolation upon larger domain values"
        }
      }
    },
    "DiscreteMappingKeyValueModel" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "type" : "string",
          "description" : "CyTable cell value to match"
        },
        "value" : {
          "type" : "string",
          "description" : "VisualProperty returned when the CyTable cell value is matched."
        }
      }
    },
    "VisualStyleMappingModel" : {
      "type" : "object",
      "required" : [ "mappingColumn", "mappingColumnType", "mappingType", "visualProperty" ],
      "properties" : {
        "mappingType" : {
          "type" : "string",
          "description" : "The type of Mapping",
          "enum" : [ "discreet", "continuous", "passthrough" ]
        },
        "mappingColumn" : {
          "type" : "string",
          "description" : "Table column this Mapping gets values from"
        },
        "mappingColumnType" : {
          "type" : "string",
          "description" : "The type of the `mappingColumn`, represented as the simple name of its Java class."
        },
        "visualProperty" : {
          "type" : "string",
          "description" : "Unique internal name of the Visual Property this mapping is applied to."
        },
        "map" : {
          "type" : "array",
          "description" : "Map for `discreet` Mappings.",
          "items" : {
            "$ref" : "#/definitions/DiscreteMappingKeyValueModel"
          }
        },
        "points" : {
          "type" : "array",
          "description" : "Points for `continuous` Mappings.",
          "items" : {
            "$ref" : "#/definitions/A single point in the Continuous Mapping Graph"
          }
        }
      }
    },
    "VisualStyleModel" : {
      "type" : "object",
      "properties" : {
        "title" : {
          "type" : "string",
          "example" : "default",
          "description" : "Name of the Visual Style"
        },
        "defaults" : {
          "type" : "array",
          "description" : "List of Visual Properties and their default values",
          "items" : {
            "$ref" : "#/definitions/Visual Property Value"
          }
        },
        "mappings" : {
          "type" : "array",
          "description" : "List of Mappings",
          "items" : {
            "$ref" : "#/definitions/VisualStyleMappingModel"
          }
        }
      }
    },
    "Title Model" : {
      "type" : "object",
      "required" : [ "title" ],
      "properties" : {
        "title" : {
          "type" : "string",
          "description" : "Title"
        }
      },
      "description" : "The new name"
    },
    "Visual Property Dependency" : {
      "type" : "object",
      "properties" : {
        "visualPropertyDependency" : {
          "type" : "string",
          "example" : "arrowColorMatchesEdge",
          "description" : "The name of the Visual Property Dependency"
        },
        "enabled" : {
          "type" : "boolean",
          "description" : "```true``` if this dependency is enabled."
        }
      }
    },
    "VisualPropertyValuesModel" : {
      "type" : "object",
      "properties" : {
        "visualProperty" : {
          "type" : "string",
          "example" : "NODE_SHAPE",
          "description" : "Unique internal name of the Visual Property."
        },
        "values" : {
          "type" : "array",
          "description" : "Values available for the Visual Property",
          "items" : {
            "type" : "object"
          }
        }
      }
    },
    "VisualPropertyModel" : {
      "type" : "object",
      "properties" : {
        "visualProperty" : {
          "type" : "string",
          "example" : "NODE_SHAPE",
          "description" : "Unique internal name of the Visual Property"
        },
        "name" : {
          "type" : "string",
          "example" : "Node Shape",
          "description" : "Human-readable name of the Visual Property. This can be seen primarily in the Cytoscape GUI"
        },
        "targetDataType" : {
          "type" : "string",
          "example" : "CyNode",
          "description" : "The data type of the Objects to which this Visual Property applies, represented as the simple name of its Java class."
        },
        "default" : {
          "type" : "string",
          "example" : "ELLIPSE",
          "description" : "Default value of this Visual Property"
        }
      }
    },
    "SUIDKeyValueModel" : {
      "type" : "object",
      "properties" : {
        "SUID" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "SUID of the object."
        },
        "value" : {
          "type" : "object",
          "description" : "Value, represented as a JSON primitive."
        }
      }
    },
    "NewColumnParameterModel" : {
      "type" : "object",
      "required" : [ "name", "type" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "New Column Name"
        },
        "type" : {
          "type" : "string",
          "description" : "New Column Data Type",
          "enum" : [ "Double", "String", "Boolean", "Long", "Integer" ]
        },
        "immutable" : {
          "type" : "boolean",
          "description" : "If true, make this column immutable."
        },
        "list" : {
          "type" : "boolean",
          "description" : "If true, make this a List column for the given type."
        },
        "local" : {
          "type" : "boolean",
          "description" : "If true, make this a local column."
        }
      }
    },
    "RenameModel" : {
      "type" : "object",
      "properties" : {
        "oldName" : {
          "type" : "string"
        },
        "newName" : {
          "type" : "string"
        }
      }
    },
    "Cytoscape Column Values" : {
      "type" : "object",
      "required" : [ "name", "values" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "Weight",
          "description" : "Column Name"
        },
        "values" : {
          "type" : "array",
          "example" : "9",
          "description" : "Column Values. These are formatted as JSON primitives.",
          "items" : {
            "type" : "object"
          }
        }
      }
    },
    "Cytoscape's GUI Panel Element" : {
      "type" : "object",
      "required" : [ "name", "state" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Name of the Panel",
          "enum" : [ "SOUTH", "EAST", "WEST", "SOUTH_WEST" ]
        },
        "state" : {
          "type" : "string",
          "description" : "State of the Panel",
          "enum" : [ "FLOAT", "DOCK", "HIDE" ]
        }
      }
    },
    "Cytoscape Desktop Availability" : {
      "type" : "object",
      "properties" : {
        "isDesktopAvailable" : {
          "type" : "boolean",
          "description" : "This is `true` if Cytoscape Desktop is available and `false` if Cytoscape is running in headless mode (not available yet)."
        }
      }
    }
  },
  "externalDocs" : {
    "description" : "Cytoscape",
    "url" : "http://cytoscape.org/"
  }
}
